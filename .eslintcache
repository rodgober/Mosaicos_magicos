[{"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\index.js":"1","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\App.js":"2","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\reportWebVitals.js":"3","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\context\\salas\\salaState.js":"4","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Juegayaprende.js":"5","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\context\\salas\\salaReducer.js":"6","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\context\\salas\\salaContext.js":"7","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\types\\index.js":"8","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Header.js":"9","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Secciones.js":"10","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Almacenes.js":"11","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Horno.js":"12","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Murales.js":"13","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Collages.js":"14","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Programacion.js":"15","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\helper.js":"16","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Almacen.js":"17","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Amosaico.js":"18","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\types\\imgbotones.js":"19","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Colores.js":"20","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Figuras.js":"21","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Mosaico.js":"22","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Variantes.js":"23","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Player.js":"24","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Sala.js":"25","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Almacencollages.js":"26"},{"size":288,"mtime":1607660916545,"results":"27","hashOfConfig":"28"},{"size":269,"mtime":1608067670081,"results":"29","hashOfConfig":"28"},{"size":362,"mtime":499162500000,"results":"30","hashOfConfig":"28"},{"size":1963,"mtime":1608155212492,"results":"31","hashOfConfig":"28"},{"size":552,"mtime":1608078363937,"results":"32","hashOfConfig":"28"},{"size":779,"mtime":1608076445618,"results":"33","hashOfConfig":"28"},{"size":109,"mtime":1608072096972,"results":"34","hashOfConfig":"28"},{"size":2103,"mtime":1608076284466,"results":"35","hashOfConfig":"28"},{"size":2619,"mtime":1608154171476,"results":"36","hashOfConfig":"28"},{"size":2811,"mtime":1608155297019,"results":"37","hashOfConfig":"28"},{"size":9821,"mtime":1608078170876,"results":"38","hashOfConfig":"28"},{"size":6012,"mtime":1608078346329,"results":"39","hashOfConfig":"28"},{"size":9779,"mtime":1608078412569,"results":"40","hashOfConfig":"28"},{"size":8982,"mtime":1608078216340,"results":"41","hashOfConfig":"28"},{"size":141,"mtime":1608072798376,"results":"42","hashOfConfig":"28"},{"size":3504,"mtime":1608076180696,"results":"43","hashOfConfig":"28"},{"size":4298,"mtime":1608072889250,"results":"44","hashOfConfig":"28"},{"size":3403,"mtime":1608078185461,"results":"45","hashOfConfig":"28"},{"size":14579,"mtime":1608079478827,"results":"46","hashOfConfig":"28"},{"size":11272,"mtime":1608244000528,"results":"47","hashOfConfig":"28"},{"size":9848,"mtime":1608155120455,"results":"48","hashOfConfig":"28"},{"size":12936,"mtime":1608078385837,"results":"49","hashOfConfig":"28"},{"size":18839,"mtime":1608155545791,"results":"50","hashOfConfig":"28"},{"size":1282,"mtime":1608078436456,"results":"51","hashOfConfig":"28"},{"size":2611,"mtime":1608078470968,"results":"52","hashOfConfig":"28"},{"size":12778,"mtime":1608078141432,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"kuyef4",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"56"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"56"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"56"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"56"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"56"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"56"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"56"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"56"},"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\index.js",[],["116","117"],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\App.js",[],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\reportWebVitals.js",[],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\context\\salas\\salaState.js",[],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Juegayaprende.js",[],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\context\\salas\\salaReducer.js",["118"],"import { SALA_HABILITADA, SET_ALMACEN, SET_MOSSELECCIONADO, SET_ALMACEN_COLLAGE } from '../../types';\r\n\r\nexport default (state, action) => {\r\n    switch(action.type) {\r\n        case SALA_HABILITADA:\r\n            return{\r\n                ...state,\r\n                sala: action.payload\r\n            }\r\n        case SET_ALMACEN:\r\n            return{\r\n                ...state,\r\n                almacen: action.payload\r\n            }\r\n        case SET_MOSSELECCIONADO:\r\n            return{\r\n                ...state,\r\n                mosSeleccionado: action.payload\r\n            }\r\n        case SET_ALMACEN_COLLAGE:\r\n            return{\r\n                ...state,\r\n                almacenCollages: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\context\\salas\\salaContext.js",[],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\types\\index.js",[],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Header.js",[],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Secciones.js",[],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Almacenes.js",["119"],"import React, { useContext, useEffect } from 'react';\r\nimport salaContext from '../context/salas/salaContext'\r\nimport styles from './Sala.module.css';\r\n\r\nimport FolderOpenIcon from '@material-ui/icons/FolderOpen';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport { obtenerXInicialMos, obtenerYInicialMos, obtenerMosXSeleccionado, obtenerXDelMosSeleccionado, obtenerLargoAlmacen, obtenerAltoAlmacen, obtenerNumMosaicosXLargoImagen } from '../helper';\r\n\r\nconst Almacenes = React.forwardRef((props,ref) => {\r\n\r\n    const refInput = React.createRef();\r\n\r\n    const salaContexto = useContext(salaContext);\r\n    const { alto, largo, separacion, almacen, setAlmacen, mosSeleccionado, setMosSeleccionado } = salaContexto;\r\n    const canvasRef = ref;\r\n\r\n    useEffect (()=>{\r\n        if (almacen<=0){\r\n            const canvas = canvasRef.current;\r\n            const ctx = canvas.getContext('2d');\r\n            ctx.fillStyle = 'white';\r\n            ctx.strokeStyle = 'white';            \r\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n            setAlmacen(0);\r\n            setMosSeleccionado(0);\r\n        }\r\n    }, [almacen]);\r\n\r\n\r\n    const handleChange = e => {\r\n        const canvas = canvasRef.current;\r\n        const ctx = canvas.getContext('2d');\r\n        let rect = canvas.getBoundingClientRect();\r\n        let x = e.clientX - rect.left; //Obtiene coordenada X donde el usuario dio clic\r\n        let y = e.clientY - rect.top; // Obtiene coordenada Y donde el usuario dio clic\r\n        let numMos = obtenerMosXSeleccionado(x, largo, separacion); //Obtenemos el numero de mosaico seleccionado\r\n        if (numMos !== mosSeleccionado && numMos <= almacen) { //El mosaico debe ser diferente al seleccionado con anterioridad y debe ser menor al tamaño del almacen\r\n            ctx.strokeStyle = 'white'; //El color blanco del cuadro para borrar la seleccion del mosaico seleccionado con anterioridad\r\n            ctx.lineWidth = 3; //Grosor 3 para borar el marco negrocon grosor 2\r\n            let xx = obtenerXDelMosSeleccionado(mosSeleccionado, largo, separacion); //Obtiene la coordenada X del mosaico seleccionado\r\n            ctx.strokeRect(xx, 0, separacion + largo + separacion, separacion + alto + separacion); // imprime el marco blanco\r\n            ctx.strokeStyle = 'black'; //Coloca el color negro para el marco del mosaico seleccionado\r\n            ctx.lineWidth = 2; //El marco de grosor 2 para que pueda ser borrado por el marco blanco\r\n            const xInicialMos = obtenerXInicialMos(x, largo, separacion); //Se obtiene la coordenada X del marco a pintar \r\n            const yInicialMos = obtenerYInicialMos(y, alto, separacion); //Se obtiene la coordenada Y del marco a pintar \r\n            ctx.strokeRect(xInicialMos, yInicialMos, separacion + largo + separacion, separacion + alto + separacion); //Se pinta el marco negro \r\n            setMosSeleccionado(numMos);//Guarda el nuevo mosaico seleccionado   \r\n            }\r\n     \r\n    }\r\n\r\n    const abrirAlmacen = e => {\r\n        const canvas = canvasRef.current;\r\n        const ctx = canvas.getContext('2d');\r\n        ctx.fillStyle = 'white';\r\n        ctx.strokeStyle = 'white';  \r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n        setMosSeleccionado(0);//Ya no hay mosaico seleccionado\r\n    \r\n        const img = new Image();\r\n        const file = e.target.files[0];\r\n        const reader = new FileReader();\r\n      \r\n        reader.addEventListener(\"load\", function () {\r\n          img.src = reader.result;\r\n        }, false);\r\n      \r\n        if (file) {\r\n          reader.readAsDataURL(file);\r\n        }\r\n    \r\n        img.onload = function() {\r\n            let numMos = obtenerNumMosaicosXLargoImagen(img.naturalWidth, largo, separacion);\r\n            setAlmacen(numMos);\r\n          ctx.drawImage(img, 0, 0, img.naturalWidth, img.naturalHeight);\r\n        };\r\n        console.log(img.naturalWidth);\r\n    }\r\n        \r\n\r\n    const eliminartodos = () => {\r\n        const canvas = canvasRef.current;\r\n        const ctx = canvas.getContext('2d');\r\n        ctx.fillStyle = 'white';\r\n        ctx.strokeStyle = 'white';  \r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n        setAlmacen(0);\r\n        setMosSeleccionado(0);//Ya no hay mosaico seleccionado\r\n    }\r\n\r\n    const borrarMos = () => {\r\n        if (mosSeleccionado > 0 && almacen > 0){  //Si existen mosaicos en el almacen y hay alguno seleccionado\r\n            const canvas = canvasRef.current;\r\n            const ctx = canvas.getContext('2d');\r\n            ctx.strokeStyle = 'white'; //El color blanco del cuadro para borrar la seleccion del mosaico seleccionado con anterioridad\r\n            ctx.lineWidth = 3; //Grosor 3 para borar el marco negrocon grosor 2\r\n            let xx = obtenerXDelMosSeleccionado(mosSeleccionado, largo, separacion); //Obtiene la coordenada X del mosaico seleccionado\r\n            ctx.strokeRect(xx, 0, separacion + largo + separacion, separacion + alto + separacion); // imprime el marco blanco\r\n            xx = obtenerXDelMosSeleccionado(mosSeleccionado+1, largo, separacion);\r\n            var imgData = ctx.getImageData(xx, 0, canvas.width-xx, canvas.height); //Obtiene la imagen  del canvas del mosaico en TRANSICION   \r\n            xx = obtenerXDelMosSeleccionado(mosSeleccionado, largo, separacion);          \r\n            ctx.putImageData(imgData, xx, 0);\r\n            setAlmacen(almacen -1);\r\n            setMosSeleccionado(0);//Ya no hay mosaico seleccionado\r\n        }\r\n    }\r\n\r\n    const guardar = () => {\r\n        if (almacen > 0){\r\n            const canvas = canvasRef.current;\r\n            if (mosSeleccionado > 0){  //Si existen mosaicos en el almacen y hay alguno seleccionado\r\n                \r\n                const ctx = canvas.getContext('2d');\r\n                ctx.strokeStyle = 'white'; //El color blanco del cuadro para borrar la seleccion del mosaico seleccionado con anterioridad\r\n                ctx.lineWidth = 3; //Grosor 3 para borar el marco negrocon grosor 2\r\n                let xx = obtenerXDelMosSeleccionado(mosSeleccionado, largo, separacion); //Obtiene la coordenada X del mosaico seleccionado\r\n                ctx.strokeRect(xx, 0, separacion + largo + separacion, separacion + alto + separacion); // imprime el marco blanco\r\n                setMosSeleccionado(0);//Ya no hay mosaico seleccionado\r\n            }\r\n            let canvasdwn = document.createElement('canvas'); //Crea el canvas que va a descargar\r\n            canvasdwn.width = obtenerLargoAlmacen(almacen, largo, separacion); //le coloca el largo del canvas dependiendo de los mosaicos\r\n            canvasdwn.height = obtenerAltoAlmacen(alto, separacion);//coloca el alto del canvas\r\n            var destCtx = canvasdwn.getContext('2d');\r\n            destCtx.drawImage(canvas, 0, 0); //Copia la imagen del canvas del almacen al canvas que va a descargar con el tamaño mínimo necesario\r\n            let downloadLink = document.createElement('a');\r\n            downloadLink.setAttribute('download', 'almacen.png');\r\n            let dataURL = canvasdwn.toDataURL('image/png');\r\n            let url = dataURL.replace(/^data:image\\/png/,'data:application/octet-stream');\r\n            downloadLink.setAttribute('href',url);\r\n            downloadLink.click();\r\n        }\r\n\r\n    }\r\n\r\n    return ( \r\n        <div className={`${styles.tercera_seccion}`} >\r\n            <div className={`${styles.contenedor_almacen}`} >\r\n                <canvas\r\n                    ref={ref}\r\n                    id='canv'\r\n                    width='1000'\r\n                    height={separacion + largo + separacion}\r\n                    onClick={handleChange}\r\n                />\r\n            </div>\r\n\r\n            <div>\r\n\r\n            <Tooltip title=\"Abrir almacen\" arrow>\r\n                    <Button\r\n                        component=\"label\"\r\n                    >\r\n                        <input\r\n                            type=\"file\"\r\n                            id=\"fileUpload\"\r\n                            style={{ display: \"none\" }}\r\n                            onChange={abrirAlmacen}\r\n                            ref={refInput}\r\n                        />\r\n                        <FolderOpenIcon></FolderOpenIcon>\r\n                    </Button>\r\n                </Tooltip>\r\n \r\n                <Tooltip title=\"Guardar almacen\" arrow>\r\n                    <Button\r\n                        type=\"button\"\r\n                        onClick={ () => guardar() }\r\n                    >\r\n                    <SaveIcon>\r\n                    </SaveIcon>\r\n                    </Button>\r\n                </Tooltip>\r\n\r\n                <Tooltip title=\"Eliminar 1 mosaico\" arrow>\r\n                    <Button\r\n                            type=\"button\"\r\n                            onClick={ () => borrarMos() }\r\n                        >\r\n                        <HighlightOffIcon\r\n                            type=\"button\"\r\n                            fontSize=\"small\"\r\n                            style={{ color: 'blue' }}\r\n                    \r\n                        ></HighlightOffIcon>\r\n                    </Button>\r\n                </Tooltip>\r\n\r\n                <Tooltip title=\"Eliminar todos los mosaicos\" arrow>\r\n                    <Button\r\n                                type=\"button\"\r\n                                onClick={ () => eliminartodos() }\r\n                            >\r\n                        <DeleteOutlineIcon></DeleteOutlineIcon>\r\n                    </Button>\r\n                </Tooltip>\r\n\r\n            </div>\r\n        </div> \r\n     );\r\n});\r\n \r\nexport default Almacenes;","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Horno.js",[],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Murales.js",["120","121","122"],"import React, { useEffect, useContext } from 'react';\r\nimport salaContext from '../context/salas/salaContext'\r\nimport { obtenerXDelMosSeleccionado, obtenerMosXSeleccionadoMu, obtenerXDelMosSeleccionadoMu, obtenerMosYSeleccionadoMu, obtenerYDelMosSeleccionadoMu } from '../helper';\r\n\r\nconst Murales = React.forwardRef((props,ref) => {\r\n\r\n    const salaContexto = useContext(salaContext);\r\n    const { alto, largo, separacion, almacen, mosSeleccionado, setMosSeleccionado } = salaContexto;\r\n    const canvasAlmacenes = ref;  // Toma la referencia del canvas del Almacen que se pasa por parámetro en la llamada del componente\r\n    const canvasMural = React.createRef(); //Crea la referencia del canvas del Mural donde se pegan los mosaicos\r\n\r\n    \r\n\r\n    const handleChange = e => {\r\n        const canvasAlm = canvasAlmacenes.current; //El current del Almacen\r\n        const canvasMu = canvasMural.current;       //El current del Mural\r\n        const ctxAlm = canvasAlm.getContext('2d');  //Crea el contexto donde tomará el mosaico seleccionado\r\n        const ctxMural = canvasMu.getContext('2d'); //Crea el contexto donde pintará el mosaico seleccionado\r\n        let xx = obtenerXDelMosSeleccionado(mosSeleccionado, largo, separacion); //Obtiene la coordenada X del mosaico seleccionado\r\n        var imgMosaico = ctxAlm.getImageData(xx + separacion, separacion, largo, alto);//Toma el mosaico del almacen\r\n        let rect = canvasMu.getBoundingClientRect();\r\n        let x = e.clientX - rect.left; //Obtiene coordenada X donde el usuario dio clic\r\n        let y = e.clientY - rect.top; // Obtiene coordenada Y donde el usuario dio clic\r\n        let numMosX = obtenerMosXSeleccionadoMu(x, largo, separacion); //Obtenemos el numero de mosaico seleccionado\r\n        xx = obtenerXDelMosSeleccionadoMu(numMosX, largo, separacion); //Obtiene la coordenada X del mosaico seleccionado\r\n        let numMosY = obtenerMosYSeleccionadoMu(y, alto, separacion); //Obtenemos el numero de mosaico seleccionado\r\n        console.log('Mosaico seleccionado en Y: ', numMosY);\r\n        let yy = obtenerYDelMosSeleccionadoMu(numMosY, alto, separacion); //Obtiene la coordenada X del mosaico seleccionado\r\n        ctxMural.putImageData(imgMosaico, xx+1 , yy+1); //Estampa el mosaico en el Mural\r\n        let dataImg = canvasMu.toDataURL(); //convierte la imagen a una cadena base 64\r\n        localStorage.setItem('mural', dataImg); //guarda la cadena en base 64 en el Local Storage\r\n    }\r\n\r\n    function limpiaMuralBtn(){\r\n        const canvasMu = canvasMural.current;       //El current del Mural\r\n        const ctxMural = canvasMu.getContext('2d');\r\n        limpiaMural(ctxMural);\r\n    }\r\n\r\n    function limpiaMural(ctx){\r\n        ctx.fillStyle = 'black';\r\n        ctx.fillRect(0, 0, (12*largo)+13, (8*largo)+9);\r\n        ctx.lineWidth = 1;\r\n        ctx.strokeStyle = 'white';\r\n     //   ctx.rect(0, 0, (12*largo)+13, (8*largo)+9);\r\n        for (let xx = 0; xx < 12; xx++) {\r\n            ctx.moveTo((alto * xx)+xx,0);\r\n            ctx.lineTo((alto * xx)+xx, (8*alto)+9);\r\n            ctx.stroke();\r\n        }\r\n        for (let xx = 0; xx < 8; xx++) {\r\n            ctx.moveTo(0,(largo * xx)+xx);\r\n            ctx.lineTo((largo * 12 ) + 12,(largo * xx)+xx);\r\n            ctx.stroke();\r\n        }\r\n    }\r\n\r\n    useEffect (()=>{\r\n        const mural1 = localStorage.getItem('mural');\r\n        const canvasMu = canvasMural.current;\r\n        const ctxMural = canvasMu.getContext('2d'); //Crea el contexto donde pintará el mosaico seleccionado    \r\n        if(mural1 === null){\r\n            limpiaMural(ctxMural);\r\n        }else{\r\n            let img = new Image();\r\n            img.src = mural1;\r\n            ctxMural.restore();\r\n            ctxMural.drawImage(img, 0, 0, canvasMu.width, canvasMu.height);\r\n            img.onload = function() {\r\n                ctxMural.drawImage(img, 0, 0, canvasMu.width, canvasMu.height);\r\n            }\r\n        }\r\n    }, []);\r\n\r\n\r\n    return ( \r\n        <div>\r\n            <canvas\r\n                ref={canvasMural}\r\n                width={(12*largo)+13}\r\n                height={(8*largo)+9}\r\n                onClick={handleChange}\r\n            />\r\n        <button\r\n            type=\"button\"\r\n            onClick={ () => limpiaMuralBtn() } \r\n        >Limpiar mural</button>\r\n        </div>\r\n    );\r\n});\r\n \r\nexport default Murales;","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Collages.js",["123","124","125"],"import React, { useEffect, useContext, useState } from 'react';\r\nimport salaContext from '../context/salas/salaContext'\r\n\r\nimport FolderOpenIcon from '@material-ui/icons/FolderOpen';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Button from '@material-ui/core/Button';\r\nimport PrintIcon from '@material-ui/icons/Print';\r\n\r\nimport { obtenerXinicialCollage, obtenerYinicialCollage, obtenerLargoSeccionCollage, obtenerAltoSeccionCollage } from '../helper';\r\n\r\n\r\nconst Collages = React.forwardRef((props,ref) => {\r\n\r\n    const canvasAlmaCollage = ref;  // Toma la referencia del canvas del Almacen que se pasa por parámetro en la llamada del componente\r\n\r\n\r\n    const [filas, setFilas] = useState(3);\r\n    const [columnas, setColumnas] = useState(3);\r\n    const salaContexto = useContext(salaContext);\r\n    const {altoCollage, largoCollage, separacion } = salaContexto;\r\n    const canvasCollage = React.createRef(); //Crea la referencia del canvas del Collage donde se pegan los murales\r\n    const refInput = React.createRef(); //Crea la referencia al input que permite abrir el mural\r\n\r\n    const handleChange = e => {\r\n        const canvasAlm = canvasAlmaCollage.current; //El current del Almacen\r\n        const canvasMu = canvasCollage.current;       //El current del Mural\r\n        const ctxAlm = canvasAlm.getContext('2d');  //Crea el contexto donde tomará el mosaico seleccionado\r\n        const ctxMural = canvasMu.getContext('2d'); //Crea el contexto donde pintará el mosaico seleccionado\r\n        var imgMosaico = ctxAlm.getImageData(0, 0, canvasAlm.width-1, canvasAlm.height-1);//Toma el mosaico del almacen\r\n        let rect = canvasMu.getBoundingClientRect();\r\n        let x = e.clientX - rect.left; //Obtiene coordenada X donde el usuario dio clic\r\n        let y = e.clientY - rect.top; // Obtiene coordenada Y donde el usuario dio clic\r\n        let xIniCollage = obtenerXinicialCollage(x, columnas, largoCollage);\r\n        let yIniCollage = obtenerYinicialCollage(y, filas, altoCollage);\r\n        let xFinCollage = obtenerLargoSeccionCollage(x, columnas, largoCollage);\r\n        let yFinCollage = obtenerAltoSeccionCollage(y, filas, altoCollage);\r\n        ctxMural.drawImage(canvasAlm, 0, 0, canvasAlm.width-1, canvasAlm.height-1, xIniCollage, yIniCollage, xFinCollage, yFinCollage); //Estampa el mosaico en el Mural\r\n    }\r\n\r\n    function limpiaColage(){\r\n        const canvasRef = canvasCollage;\r\n        const canvas = canvasRef.current;\r\n        const ctx = canvas.getContext('2d');\r\n        ctx.lineWidth = 1;\r\n        ctx.lineCap = 'butt';\r\n        ctx.fill('nonzero');\r\n        ctx.fillStyle = 'black';\r\n        ctx.strokeStyle = 'white';\r\n        ctx.clearRect(0, 0, largoCollage,altoCollage);\r\n        ctx.fillRect(0, 0, largoCollage,altoCollage);\r\n        ctx.beginPath();\r\n        let tamColumnas =  largoCollage / columnas;\r\n        for (let xx = 0; xx < columnas; xx++) {\r\n            ctx.moveTo((tamColumnas * xx),0);\r\n            ctx.lineTo((tamColumnas * xx), altoCollage);\r\n            ctx.stroke();\r\n        }\r\n        let tamFilas = altoCollage / filas;\r\n        for (let yy = 0; yy < filas; yy++) {\r\n            ctx.moveTo(0,(tamFilas * yy));\r\n            ctx.lineTo(largoCollage,(tamFilas * yy));\r\n            ctx.stroke();\r\n        }\r\n    }\r\n\r\n    const imprimir = () => {\r\n        const canvasRef = canvasCollage;\r\n        const canvas = canvasRef.current;\r\n        let canvasdwn = document.createElement('canvas'); //Crea el canvas que va a descargar\r\n        canvasdwn.width = largoCollage; //le coloca el largo del canvas dependiendo de los mosaicos\r\n        canvasdwn.height = altoCollage;//coloca el alto del canvas\r\n        var destCtx = canvasdwn.getContext('2d');\r\n        destCtx.drawImage(canvas, 0, 0); //Copia la imagen del canvas del almacen al canvas que va a descargar con el tamaño mínimo necesario\r\n        let downloadLink = document.createElement('a');\r\n        downloadLink.setAttribute('download', 'collage.png');\r\n        let dataURL = canvasdwn.toDataURL('image/png');\r\n\r\n        var windowContent = '<img src=\"' + dataURL + '\">';\r\n        var printWin = window.open('','','width=800,height=600');\r\n        printWin.document.open();\r\n        printWin.document.write(windowContent);\r\n        printWin.document.close();\r\n        printWin.focus();\r\n        printWin.print();\r\n    }\r\n\r\n    const guardar = () => {\r\n        const canvasRef = canvasCollage;\r\n        const canvas = canvasRef.current;\r\n        let canvasdwn = document.createElement('canvas'); //Crea el canvas que va a descargar\r\n        canvasdwn.width = largoCollage; //le coloca el largo del canvas dependiendo de los mosaicos\r\n        canvasdwn.height = altoCollage;//coloca el alto del canvas\r\n        var destCtx = canvasdwn.getContext('2d');\r\n        destCtx.drawImage(canvas, 0, 0); //Copia la imagen del canvas del almacen al canvas que va a descargar con el tamaño mínimo necesario\r\n        let downloadLink = document.createElement('a');\r\n        downloadLink.setAttribute('download', 'collage.png');\r\n        let dataURL = canvasdwn.toDataURL('image/png');\r\n        let url = dataURL.replace(/^data:image\\/png/,'data:application/octet-stream');\r\n        downloadLink.setAttribute('href',url);\r\n        downloadLink.click();\r\n    }\r\n\r\n    const abrirCollageBtn = e => {\r\n        const canvasRef = canvasCollage;\r\n        const canvas = canvasRef.current;\r\n        const ctx = canvas.getContext('2d');\r\n        ctx.fillStyle = 'black';\r\n        ctx.strokeStyle = 'white';  \r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n      \r\n        const img = new Image();\r\n        const file = e.target.files[0];\r\n        const reader = new FileReader();\r\n        reader.addEventListener(\"load\", function () {\r\n          img.src = reader.result;\r\n        }, false);\r\n      \r\n        if (file) {\r\n          reader.readAsDataURL(file);\r\n        }\r\n     \r\n        img.onload = function() {\r\n          ctx.drawImage(img, 0, 0, img.naturalWidth, img.naturalHeight);\r\n        };\r\n    }\r\n\r\n    const asignarFilas = e => {\r\n        setFilas(e.target.value);\r\n    }\r\n\r\n    const asignarColumnas = e => {\r\n        setColumnas(e.target.value);\r\n    }\r\n\r\n    useEffect(() => {   \r\n        limpiaColage();        \r\n    }, [filas, columnas])\r\n\r\n    return ( \r\n        <div>\r\n            <canvas\r\n                ref={canvasCollage}\r\n                width={largoCollage}\r\n                height={altoCollage}\r\n                onClick={handleChange}\r\n            />\r\n        <p>Filas.</p>\r\n        <select \r\n            id='filas'\r\n            onChange={asignarFilas}\r\n            defaultValue= \"3\">\r\n            <option value=\"1\">1</option>\r\n            <option value=\"2\">2</option>\r\n            <option value=\"3\">3</option>\r\n            <option value=\"4\">4</option>\r\n            <option value=\"5\">5</option>\r\n        </select>\r\n\r\n        <p>Columnas.</p>\r\n        <select \r\n            id='columnas' \r\n            onChange={asignarColumnas}\r\n            defaultValue= \"3\">\r\n            <option value=\"1\">1</option>\r\n            <option value=\"2\">2</option>\r\n            <option value=\"3\">3</option>\r\n            <option value=\"4\">4</option>\r\n            <option value=\"5\">5</option>\r\n        </select>\r\n\r\n        <Tooltip title=\"Abrir collage\" arrow>\r\n                    <Button\r\n                        component=\"label\"\r\n                    >\r\n                        <input\r\n                            type=\"file\"\r\n                            id=\"fileUpload\"\r\n                            style={{ display: \"none\" }}\r\n                            onChange={abrirCollageBtn}\r\n                            ref={refInput}\r\n                        />\r\n                        <FolderOpenIcon></FolderOpenIcon>\r\n                    </Button>\r\n                </Tooltip>\r\n\r\n<Tooltip title=\"Guardar collage\" arrow>\r\n                    <Button\r\n                        type=\"button\"\r\n                        onClick={ () => guardar() }\r\n                    >\r\n                    <SaveIcon>\r\n                    </SaveIcon>\r\n                    </Button>\r\n                </Tooltip>\r\n\r\n        <Tooltip title=\"Limpiar el collage\" arrow>\r\n                    <Button\r\n                                type=\"button\"\r\n                                onClick={ () => limpiaColage() }\r\n                            >\r\n                        <DeleteOutlineIcon></DeleteOutlineIcon>\r\n                    </Button>\r\n                </Tooltip>\r\n    \r\n        <Tooltip title=\"Imprimir collage\" arrow>\r\n                    <Button\r\n                                type=\"button\"\r\n                                onClick={ () => imprimir() }\r\n                            >\r\n                        <PrintIcon></PrintIcon>\r\n                    </Button>\r\n                </Tooltip>             \r\n        </div>\r\n     );\r\n});\r\n \r\nexport default Collages;","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Programacion.js",[],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\helper.js",[],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Almacen.js",[],["126","127"],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Amosaico.js",["128"],"import React, { useContext, Fragment, useEffect } from 'react';\r\nimport salaContext from '../context/salas/salaContext'\r\nimport styles from './Amosaico.module.css';\r\nimport { horno1, horno2, horno3, huecosTrans } from '../types/imgbotones';\r\n\r\nconst fuente1 = horno1; //Horno apagado\r\nconst fuente2 = horno2; //Horno encendido\r\nconst fuente3 = horno3; //Horno encendido\r\nconst huecos = huecosTrans;\r\n\r\nconst Amosaico = React.forwardRef((props, ref) => {\r\n\r\n    let {animacion, setAnimacion} = props;\r\n\r\n\r\n    const salaContexto = useContext(salaContext);\r\n    const { alto, largo } = salaContexto;\r\n\r\n\r\n      useEffect(() => {\r\n        if(animacion){\r\n            const interval = setInterval(() => {\r\n                setAnimacion(false);\r\n              }, 5000);\r\n              return () => clearInterval(interval);\r\n        }\r\n        \r\n\r\n      }, [animacion]);\r\n\r\n\r\n\r\n    return ( \r\n      <Fragment>\r\n          <div className={`${styles.horno}`} >\r\n                <div \r\n                    className={animacion ? `${styles.mosaicotran}` : `${styles.mosaicotran1}`}\r\n                >\r\n                    <canvas\r\n                        ref={ref}\r\n                        width={alto}\r\n                        height={largo}\r\n                    />\r\n                </div>\r\n\r\n                \r\n\r\n                \r\n\r\n                    <img className= {`${styles.cfimg}`} \r\n                        src={fuente1}\r\n                        alt=\"Horno\"\r\n                    />\r\n\r\n                    <img className={animacion ? `${styles.cfimg}` : `${styles.ocultar}`} \r\n                        src={fuente2}\r\n                        alt=\"Horno encendido\"\r\n                                />\r\n                    <img className={animacion ? `${styles.cftop}` : `${styles.ocultar}`} \r\n                        src={fuente3}\r\n                        alt=\"Horno encendido\"\r\n                                />\r\n                    <img className= {`${styles.huecos}`} \r\n                        src={huecos}\r\n                        alt=\"Horno\"\r\n                    />\r\n            </div>\r\n      </Fragment>\r\n     );\r\n});\r\n \r\nexport default Amosaico;\r\n\r\n\r\n    //////\r\n    //PRUEBAS ANIMACIÓN Contador que si funciona//\r\n    /////\r\n    /*\r\n    \r\n    const [count, setCount] = React.useState(0)\r\n    const useAnimationFrame = callback => {\r\n        // Use useRef for mutable variables that we want to persist\r\n        // without triggering a re-render on their change\r\n        const requestRef = React.useRef();\r\n        const previousTimeRef = React.useRef();\r\n        \r\n        const animate = time => {\r\n          if (previousTimeRef.current != undefined) {\r\n            const deltaTime = time - previousTimeRef.current;\r\n            callback(deltaTime)\r\n          }\r\n          previousTimeRef.current = time;\r\n          requestRef.current = requestAnimationFrame(animate);\r\n        }\r\n        \r\n        React.useEffect(() => {\r\n          requestRef.current = requestAnimationFrame(animate);\r\n          return () => cancelAnimationFrame(requestRef.current);\r\n        }, []); // Make sure the effect runs only once\r\n      }\r\n\r\n    const [count, setCount] = React.useState(0)\r\n  \r\n    useAnimationFrame(deltaTime => {\r\n      // Pass on a function to the setter of the state\r\n      // to make sure we always have the latest state\r\n      setCount(prevCount => (prevCount + deltaTime * 0.01) % 100)\r\n    })\r\n*/","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\types\\imgbotones.js",[],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Colores.js",["129"],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Figuras.js",["130"],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Mosaico.js",["131"],"import React, {useEffect, useContext } from 'react';\r\nimport salaContext from '../context/salas/salaContext'\r\n\r\nconst Mosaico = React.forwardRef((props, ref) => {\r\n\r\n    const salaContexto = useContext(salaContext);\r\n    const { alto, largo } = salaContexto;\r\n\r\n    const col = ['red', 'yellow', 'green', 'aqua', 'blue', 'fuchsia', 'gray', 'orange', 'black', 'white'];\r\n    let {figura, variante, color, pintar, setPintar, setFigura, setVariante} = props;\r\n\r\n    \r\n\r\n    useEffect(e => {\r\n        if(pintar){\r\n            const canvasRef = ref;\r\n\r\n            const canvas = canvasRef.current;\r\n            const ctx = canvas.getContext('2d');\r\n            ctx.lineWidth = 2;\r\n            ctx.lineCap = 'butt';\r\n            ctx.fill('nonzero');\r\n            ctx.fillStyle = col[color-21];\r\n            ctx.strokeStyle = col[color-21];\r\n\r\n            ctx.beginPath();\r\n\r\n            switch (figura) {\r\n                case 1:\r\n                    fig1(ctx);//Circulo\r\n                    break;\r\n                case 2:\r\n                    fig2(ctx);//Cuadrado\r\n                    break;\r\n                case 3:\r\n                    fig3(ctx);//Triangulo\r\n                    break;\r\n                case 4:\r\n                    fig4(ctx);//Rombo\r\n                    break;\r\n                case 5:\r\n                    fig5(ctx);//Hexagono\r\n                    break;\r\n                case 6:\r\n                    fig6(ctx);//Linea\r\n                    break;\r\n                default:\r\n                    fig1(ctx);//Circulo\r\n                    break;\r\n            }\r\n            superRelleno(ctx);//la peor función de mi vida :()\r\n          //  ctx.stroke();\r\n            setPintar(false);\r\n            setFigura(0);\r\n            setVariante(0);\r\n            return;\r\n        }        \r\n    }, [pintar]);\r\n\r\n    function superRelleno(ctx){\r\n        for (let index = 0; index < 30; index++) {\r\n            ctx.fill();   \r\n        }\r\n    }\r\n\r\n    //Manda las coordenadas para imprimir un círculo dependiendo su variante\r\n    function fig1(ctx){\r\n        switch (variante) {\r\n            case 11:\r\n                circulo(ctx, (largo / 2), (alto / 2), (alto / 2), 0, 2 * Math.PI);\r\n                break;\r\n            case 12:\r\n                circulo(ctx, (largo / 2), (alto / 2), (alto / 4), 0, 2 * Math.PI);\r\n                break;\r\n            case 13:\r\n                circulo(ctx, 0, (alto / 2), (alto / 2), 1.5 * Math.PI, 0.5 * Math.PI);\r\n                break;\r\n            case 14:\r\n                circulo(ctx, largo, (alto / 2), (alto / 2), 0.5 * Math.PI, 1.5 * Math.PI);\r\n                break;\r\n            case 15:\r\n                circulo(ctx, (alto / 2), 0, (alto / 2), 0, Math.PI);\r\n                break;\r\n            case 16:\r\n                circulo(ctx, (alto / 2), largo, (alto / 2), Math.PI, 0);\r\n                break;\r\n            case 17:\r\n                circulo(ctx, 0, alto, (alto / 2), 1.5 * Math.PI, 0);\r\n                break;\r\n            case 18:\r\n                circulo(ctx, 0, 0, (alto / 2), 0, 0.5 * Math.PI);\r\n                break;\r\n            case 19:\r\n                circulo(ctx, largo, 0, (alto / 2), 0.5 * Math.PI, Math.PI);\r\n                break;\r\n            case 20:\r\n                circulo(ctx, largo, largo, (alto / 2), Math.PI, 1.5 * Math.PI);\r\n                break;\r\n            default:\r\n                circulo(ctx, (largo / 2), (alto / 2), (alto / 2), 0, 2 * Math.PI);\r\n                break;\r\n        }\r\n    }\r\n\r\n    //Dibuja un arco con centro en X, Y, con un radio r inicia en i y termina en f\r\n    function circulo(ctx, x, y, r, i, f){\r\n        ctx.moveTo(x, y);\r\n        ctx.arc(x, y, r, i,f);\r\n        ctx.moveTo(x, y);\r\n    }\r\n\r\n    //Manda las coordenadas para imprimir un RECTANGULO dependiendo su variante\r\n    function fig2(ctx) {\r\n        switch (variante) {\r\n            case 11:\r\n                rectangulo(ctx, 0, 0, alto, largo);//X, Y, largo, alto\r\n                break;\r\n            case 12:\r\n                rectangulo(ctx, largo / 4, alto / 4, largo / 2, alto / 2 );\r\n                break;\r\n            case 13:\r\n                rectangulo(ctx, 0, 0, largo / 2, alto);\r\n                break;\r\n            case 14:\r\n                rectangulo(ctx, largo / 2, 0, largo / 2, alto);\r\n                break;\r\n            case 15:\r\n                rectangulo(ctx, 0, 0, largo, alto / 2);\r\n                break;\r\n            case 16:\r\n                rectangulo(ctx, 0, alto / 2, largo, alto / 2);\r\n                break;\r\n            case 17:\r\n                rectangulo(ctx, 0, largo / 2, largo / 2, alto / 2);\r\n                break;\r\n            case 18:\r\n                rectangulo(ctx, 0, 0, largo / 2, alto / 2);\r\n                break;\r\n            case 19:\r\n                rectangulo(ctx, alto / 2, 0, largo / 2, alto / 2);\r\n                break;\r\n            case 20:\r\n                rectangulo(ctx, alto / 2, largo / 2, largo / 2, alto / 2);\r\n                break;\r\n            default:\r\n                rectangulo(ctx, 0, 0, alto, largo);\r\n                break;\r\n        }\r\n    }\r\n\r\n    //Dibuja un rectángulo, toma X, Y y el largo y alto\r\n    function rectangulo (ctx, x, y, largo, alto) {\r\n        ctx.fillRect(x, y, largo, alto); //X, Y, largo, alto\r\n    }\r\n\r\n    //Manda las coordenadas para imprimir un TRINAGULO dependiendo su variante\r\n    function fig3(ctx) {\r\n        switch (variante) {\r\n            case 11:\r\n                triangulo(ctx, [largo / 2, 0], [largo, alto], [0, alto]);//X, Y, largo, alto\r\n                break;\r\n            case 12:\r\n                triangulo(ctx, [0,0],[largo, 0],[alto / 2, largo]);\r\n                break;\r\n            case 13:\r\n                triangulo(ctx, [0,0],[largo / 2, alto / 2], [0, largo]);\r\n                break;\r\n            case 14:\r\n                triangulo(ctx, [largo, 0],[largo, alto],[largo / 2, alto / 2]);\r\n                break;\r\n            case 15:\r\n                triangulo(ctx, [0,0], [largo, 0], [largo / 2, alto / 2]);\r\n                break;\r\n            case 16:\r\n                triangulo(ctx, [largo / 2, alto / 2], [largo, alto], [0, alto]);\r\n                break;\r\n            case 17:\r\n                triangulo(ctx, [0,0], [largo, alto], [0, alto]);\r\n                break;\r\n            case 18:\r\n                triangulo(ctx, [0,0], [largo, 0], [largo, alto]);\r\n                break;\r\n            case 19:\r\n                triangulo(ctx, [largo, 0], [largo, alto], [0, alto]);\r\n                break;\r\n            case 20:\r\n                triangulo(ctx, [0,0],[largo, 0],[0, alto]);\r\n                break;\r\n            default:\r\n                triangulo(ctx, [largo / 2, 0], [largo, alto], [0, alto]);\r\n                break;\r\n        }\r\n    }\r\n\r\n    //Funcion que pitan triángulos, recibe 3 vertices\r\n    function triangulo (ctx, vertice1, vertice2, vertice3) {\r\n        ctx.moveTo(vertice1[0], vertice1[1]);\r\n        ctx.lineTo(vertice2[0], vertice2[1]);\r\n        ctx.lineTo(vertice3[0], vertice3[1]);\r\n        ctx.lineTo(vertice1[0], vertice1[1]);\r\n\r\n    }\r\n\r\n    //Manda las coordenadas para imprimir un ROMBO dependiendo su variante\r\n    function fig4(ctx) {\r\n        switch (variante) {\r\n            case 11:\r\n                rombo(ctx, [largo / 2, 0],[largo, alto / 2],[largo / 2, alto],[0, alto / 2]);\r\n                break;\r\n            case 12:\r\n                rombo(ctx,  [largo / 2, alto / 4],[(largo / 4)*3, alto / 2],[largo / 2, (alto / 4 )*3],[largo / 4, alto / 2]);\r\n                break;\r\n            default:\r\n                rombo(ctx, [largo / 2, 0],[largo, alto / 2],[largo / 2, alto],[0, alto / 2]);\r\n                break;\r\n        }\r\n    }\r\n\r\n    //Funcion que pitan ROMBOS, recibe 4 vertices\r\n    function rombo (ctx, vertice1, vertice2, vertice3, vertice4) {\r\n        ctx.moveTo(vertice1[0], vertice1[1]);\r\n        ctx.lineTo(vertice2[0], vertice2[1]);\r\n        ctx.lineTo(vertice3[0], vertice3[1]);\r\n        ctx.lineTo(vertice4[0], vertice4[1]);\r\n        ctx.lineTo(vertice1[0], vertice1[1]);\r\n    }\r\n\r\n    //Manda las coordenadas para imprimir un HEXÁGONO dependiendo su variante\r\n    function fig5(ctx) {\r\n        switch (variante) {\r\n            case 11:\r\n                hexa(ctx, [largo / 4, 0],[(largo / 4) * 3, 0],[largo, alto / 2],[(largo / 4) * 3, alto],[largo / 4, alto],[0, alto / 2]);\r\n                break;\r\n            case 12:\r\n                hexa(ctx,   [largo / 2, 0],[largo, alto / 4],[largo, (alto / 4)*3],[largo / 2, alto],[0, (alto / 4)*3],[0, alto / 4]);\r\n                break;\r\n            default:    \r\n                hexa(ctx, [largo / 4, 0],[(largo / 4) * 3, 0],[largo, alto / 2],[(largo / 4) * 3, alto],[largo / 4, alto],[0, alto / 2]);\r\n                break;\r\n        }\r\n    }\r\n\r\n    //Funcion que pitan HEXAGONOS, recibe 6 vertices\r\n    function hexa (ctx, vertice1, vertice2, vertice3, vertice4, vertice5, vertice6) {\r\n        ctx.moveTo(vertice1[0], vertice1[1]);\r\n        ctx.lineTo(vertice2[0], vertice2[1]);\r\n        ctx.lineTo(vertice3[0], vertice3[1]);\r\n        ctx.lineTo(vertice4[0], vertice4[1]);\r\n        ctx.lineTo(vertice5[0], vertice5[1]);\r\n        ctx.lineTo(vertice6[0], vertice6[1]);\r\n        ctx.lineTo(vertice1[0], vertice1[1]);\r\n    }\r\n\r\n    //Manda las coordenadas para imprimir una LINEA dependiendo su variante\r\n    function fig6(ctx) {\r\n        switch (variante) {\r\n            case 11:\r\n                linea(ctx, [largo / 2, 0],[largo / 2, alto]);\r\n                break;\r\n            case 12:\r\n                linea(ctx, [0, alto / 2],[largo, alto / 2]);\r\n                break;\r\n            case 13:\r\n                linea(ctx, [0, alto],[largo, 0]);\r\n                break;\r\n            case 14:\r\n                linea(ctx, [0, 0],[largo, alto]);\r\n                break;\r\n            default:    \r\n                linea(ctx, [largo / 2, 0],[largo / 2, alto]);\r\n                break;\r\n        }\r\n        ctx.stroke();\r\n    }\r\n\r\n    //Funcion que pinta Linea\r\n    function linea (ctx, pto1, pto2) {\r\n        ctx.moveTo(pto1[0], pto1[1]);\r\n        ctx.lineTo(pto2[0], pto2[1]);\r\n    }    \r\n\r\n    return ( \r\n        <div>\r\n            <canvas\r\n                ref={ref}\r\n                width={alto}\r\n                height={largo}\r\n            />\r\n        </div>\r\n     );\r\n});\r\n \r\nexport default Mosaico;","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Variantes.js",["132","133"],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Player.js",["134","135"],"import React, { useEffect, useState } from 'react';\r\nimport styles from './Player.module.css';\r\n\r\nconst useAudio = url => {\r\n    const [audio] = useState(new Audio(url));\r\n    const [playing, setPlaying] = useState(false);\r\n  \r\n    const toggle = () => setPlaying(!playing);\r\n  \r\n    useEffect(() => {\r\n        playing ? audio.play() : audio.pause();\r\n      },\r\n      [playing]\r\n    );\r\n  \r\n    useEffect(() => {\r\n      audio.addEventListener('ended', () => setPlaying(false));\r\n      audio.loop = true;\r\n      return () => {\r\n        audio.removeEventListener('ended', () => setPlaying(false));\r\n      };\r\n    }, []);\r\n  \r\n    return [playing, toggle];\r\n  };\r\n\r\nconst Player = ({ url }) => {\r\n    const [playing, toggle] = useAudio(url);\r\n    //<button onClick={toggle}>{playing ? \"Pause\" : \"Play\"}</button>\r\n    return ( \r\n        <div>\r\n            <label \r\n              className={`${styles.label_checkbox}`}  \r\n              >\r\n                Audio\r\n                <input\r\n                    name=\"audio\"\r\n                    type=\"checkbox\"\r\n                    checked={playing}\r\n                    onChange={toggle} />\r\n                    <span className={`${styles.checkmark}`} ></span>\r\n            </label>\r\n        </div>\r\n\r\n\r\n     );\r\n}\r\n \r\nexport default Player;","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Sala.js",[],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Almacencollages.js",["136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151"],"import React, { useState, useContext, useEffect, Component } from 'react';\r\nimport salaContext from '../context/salas/salaContext';\r\nimport styles from './Almacencollages.module.css';\r\n\r\nimport FolderOpenIcon from '@material-ui/icons/FolderOpen';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\nimport { obtenerXInicialMos, obtenerYInicialMos, obtenerMosXSeleccionado, obtenerXDelMosSeleccionado, obtenerLargoAlmacen, obtenerAltoAlmacen, obtenerNumMosaicosXLargoImagen } from '../helper';\r\n\r\nconst Almacencollages = React.forwardRef((props,ref) => {\r\n\r\n    const refInput = React.createRef();\r\n    const mural1 = React.createRef();\r\n    const mural2 = React.createRef();\r\n    const mural3 = React.createRef();\r\n    const mural4 = React.createRef();\r\n    const mural5 = React.createRef();\r\n    const mural6 = React.createRef();\r\n    const mural7 = React.createRef();\r\n    const mural8 = React.createRef();\r\n    const mural9 = React.createRef();\r\n    const mural10 = React.createRef();\r\n\r\n    const salaContexto = useContext(salaContext);\r\n    const { alto, largo, separacion, almacenCollages, setAlmacenCollages, mosSeleccionado, setMosSeleccionado } = salaContexto;\r\n    const canvasRef = ref;\r\n    const componentsMap = [ mural1, mural2, mural3, mural4, mural5, mural6, mural7, mural8, mural9, mural10 ];\r\n\r\n    const [muralSeleccionado, setMuralSeleccionado] = useState(0);\r\n\r\n    useEffect (()=>{\r\n        if (almacenCollages<=0){\r\n            setAlmacenCollages(0);\r\n            setMuralSeleccionado(0);\r\n        }\r\n    }, [almacenCollages]);\r\n\r\n\r\n    const abrirAlmacen = e => {\r\n        let canvas;\r\n        switch (almacenCollages) {\r\n            case 0:\r\n                canvas = mural1.current;\r\n                break;\r\n            case 1:\r\n                canvas = mural2.current;\r\n                break;\r\n            case 2:\r\n                canvas = mural3.current;\r\n                break;\r\n            case 3:\r\n                canvas = mural4.current;\r\n                break;\r\n            case 4:\r\n                canvas = mural5.current;\r\n                break;\r\n            case 5:\r\n                canvas = mural6.current;\r\n                break;\r\n            case 6:\r\n                canvas = mural7.current;\r\n                break;\r\n            case 7:\r\n                canvas = mural8.current;\r\n                break;\r\n            case 8:\r\n                canvas = mural9.current;\r\n                break;\r\n            case 9:\r\n                canvas = mural10.current;\r\n                break;\r\n            default:\r\n                canvas = mural1.current;\r\n                break;\r\n        }\r\n            const ctx = canvas.getContext('2d');\r\n            ctx.fillStyle = 'white';\r\n            ctx.strokeStyle = 'white';  \r\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n            const img = new Image();\r\n            const file = e.target.files[0];\r\n            const reader = new FileReader();\r\n            reader.addEventListener(\"load\", function () {\r\n                img.src = reader.result;\r\n            }, false);\r\n                \r\n            if (file) {\r\n                reader.readAsDataURL(file);\r\n            }\r\n              \r\n            img.onload = function() {\r\n              ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\r\n            };\r\n            setAlmacenCollages(almacenCollages + 1);\r\n        \r\n        setMuralSeleccionado(0)\r\n    }\r\n\r\n    const handleChange = e => {\r\n        if(parseInt(e.target.parentElement.id, 10) <= almacenCollages){\r\n            setMuralSeleccionado(parseInt(e.target.parentElement.id, 10));\r\n            const canvasAlm = e.currentTarget; //El current del Almacen\r\n            const canvasSel = ref.current;       //El current del mosaico seleccionado oculto\r\n            const ctxAlm = canvasAlm.getContext('2d');  //Crea el contexto donde tomará el mosaico seleccionado\r\n            const ctxMuralSel = canvasSel.getContext('2d'); //Crea el contexto donde pintará el mosaico seleccionado\r\n            var imgMural = ctxAlm.getImageData(0,0, canvasAlm.width-1, canvasAlm.height-1);//Toma el mosaico del almacen\r\n            ctxMuralSel.putImageData(imgMural, 0, 0); //Estampa el mosaico en el Mural\r\n        }\r\n    }\r\n\r\n    const eliminartodos = () => {\r\n        let canv;\r\n        let canvas;\r\n        let ctx;\r\n        for (let index = 0; index < 10; index++) {\r\n            canv = componentsMap[index];\r\n            canvas = canv.current;\r\n            ctx = canvas.getContext('2d');\r\n            ctx.clearRect(0, 0, canvas.width, canvas.height); \r\n        }\r\n        setMuralSeleccionado(0);\r\n        setAlmacenCollages(0);\r\n    }\r\n\r\n    const borrarMural = () => {\r\n        if (muralSeleccionado > 0 && almacenCollages > 0){\r\n            let canv1;\r\n            let canv2;\r\n            let canvas1;\r\n            let canvas2;\r\n            let ctx1;\r\n            for (let index = muralSeleccionado; index < almacenCollages; index++) {\r\n                canv1 = componentsMap[index - 1];\r\n                canv2 = componentsMap[index];\r\n                canvas1 = canv1.current;\r\n                canvas2 = canv2.current;\r\n                ctx1 = canvas1.getContext('2d');\r\n                ctx1.drawImage(canvas2, 0, 0);\r\n            }\r\n            canv1 = componentsMap[almacenCollages - 1];\r\n            canvas1 = canv1.current;\r\n            ctx1 = canvas1.getContext('2d');\r\n            ctx1.clearRect(0, 0, canvas1.width, canvas1.height);\r\n            setAlmacenCollages(almacenCollages - 1 );\r\n            setMuralSeleccionado(0);\r\n        }\r\n    }\r\n\r\n\r\n    return ( \r\n        <div className={`${styles.tercera_seccion}`} >\r\n            <div className={`${styles.contenedor_almacen_collages}`} >\r\n                <div className={(1 === muralSeleccionado) ? `${styles.cont_mural_almacen_sel}` : `${styles.cont_mural_almacen}`}\r\n                    id='1'>\r\n                        <canvas className={`${styles.mural_collage}`}\r\n                            width='493px'\r\n                            height='329px'\r\n                            id='11'\r\n                            ref={mural1}\r\n                            onClick={handleChange}\r\n                        />\r\n                </div>\r\n                <div className={(2 === muralSeleccionado) ? `${styles.cont_mural_almacen_sel}` : `${styles.cont_mural_almacen}`}\r\n                    id='2'>\r\n                        <canvas className={`${styles.mural_collage}`}\r\n                            width='493px'\r\n                            height='329px'\r\n                            id='12'\r\n                            ref={mural2}\r\n                            onClick={handleChange}\r\n                        />\r\n                </div>\r\n                <div className={(3 === muralSeleccionado) ? `${styles.cont_mural_almacen_sel}` : `${styles.cont_mural_almacen}`}\r\n                    id='3'>\r\n                        <canvas className={`${styles.mural_collage}`}\r\n                            width='493px'\r\n                            height='329px'\r\n                            id='13'\r\n                            ref={mural3}\r\n                            onClick={handleChange}\r\n                        />\r\n                </div>\r\n                <div className={(4 === muralSeleccionado) ? `${styles.cont_mural_almacen_sel}` : `${styles.cont_mural_almacen}`}\r\n                    id='4'>\r\n                        <canvas className={`${styles.mural_collage}`}\r\n                            width='493px'\r\n                            height='329px'\r\n                            id='14'\r\n                            ref={mural4}\r\n                            onClick={handleChange}\r\n                        />\r\n                </div>\r\n                <div className={(5 === muralSeleccionado) ? `${styles.cont_mural_almacen_sel}` : `${styles.cont_mural_almacen}`}\r\n                    id='5'>\r\n                        <canvas className={`${styles.mural_collage}`}\r\n                            width='493px'\r\n                            height='329px'\r\n                            id='15'\r\n                            ref={mural5}\r\n                            onClick={handleChange}\r\n                        />\r\n                </div>\r\n                <div className={(6 === muralSeleccionado) ? `${styles.cont_mural_almacen_sel}` : `${styles.cont_mural_almacen}`}\r\n                    id='6'>\r\n                        <canvas className={`${styles.mural_collage}`}\r\n                            width='493px'\r\n                            height='329px'\r\n                            id='16'\r\n                            ref={mural6}\r\n                            onClick={handleChange}\r\n                        />\r\n                </div>\r\n                <div className={(7 === muralSeleccionado) ? `${styles.cont_mural_almacen_sel}` : `${styles.cont_mural_almacen}`}\r\n                    id='7'>\r\n                        <canvas className={`${styles.mural_collage}`}\r\n                            width='493px'\r\n                            height='329px'\r\n                            id='17'\r\n                            ref={mural7}\r\n                            onClick={handleChange}\r\n                        />\r\n                </div>\r\n                <div className={(8 === muralSeleccionado) ? `${styles.cont_mural_almacen_sel}` : `${styles.cont_mural_almacen}`}\r\n                    id='8'>\r\n                        <canvas className={`${styles.mural_collage}`}\r\n                            width='493px'\r\n                            height='329px'\r\n                            id='18'\r\n                            ref={mural8}\r\n                            onClick={handleChange}\r\n                        />\r\n                </div>\r\n                <div className={(9 === muralSeleccionado) ? `${styles.cont_mural_almacen_sel}` : `${styles.cont_mural_almacen}`}\r\n                    id='9'>\r\n                        <canvas className={`${styles.mural_collage}`}\r\n                            width='493px'\r\n                            height='329px'\r\n                            id='19'\r\n                            ref={mural9}\r\n                            onClick={handleChange}\r\n                        />\r\n                </div>\r\n                <div className={(10 === muralSeleccionado) ? `${styles.cont_mural_almacen_sel}` : `${styles.cont_mural_almacen}`}\r\n                    id='10'>\r\n                        <canvas className={`${styles.mural_collage}`}\r\n                            width='493px'\r\n                            height='329px'\r\n                            id='20'\r\n                            ref={mural10}\r\n                            onClick={handleChange}\r\n                        />\r\n                </div>\r\n            </div>\r\n\r\n            <div>\r\n            <Tooltip title=\"Abrir mural\" arrow>\r\n                    <Button\r\n                        component=\"label\"\r\n                    >\r\n                        <input\r\n                            type=\"file\"\r\n                            id=\"fileUpload\"\r\n                            style={{ display: \"none\" }}\r\n                            onChange={abrirAlmacen}\r\n                            ref={refInput}\r\n                        />\r\n                        <FolderOpenIcon></FolderOpenIcon>\r\n                    </Button>\r\n                </Tooltip>\r\n\r\n           \r\n            <Tooltip title=\"Eliminar 1 mural\" arrow>\r\n                    <Button\r\n                            type=\"button\"\r\n                            onClick={ () => borrarMural() }\r\n                        >\r\n                        <HighlightOffIcon\r\n                            type=\"button\"\r\n                            fontSize=\"small\"\r\n                            style={{ color: 'blue' }}\r\n                    \r\n                        ></HighlightOffIcon>\r\n                    </Button>\r\n                </Tooltip>\r\n\r\n                <Tooltip title=\"Eliminar todos los mosaicos\" arrow>\r\n                    <Button\r\n                                type=\"button\"\r\n                                onClick={ () => eliminartodos() }\r\n                            >\r\n                        <DeleteOutlineIcon></DeleteOutlineIcon>\r\n                    </Button>\r\n                </Tooltip>\r\n\r\n            </div>\r\n            <canvas className={`${styles.mural_oculto}`}\r\n                            width='493px'\r\n                            height='329px'\r\n                            id='21'\r\n                            ref={ref}\r\n            />\r\n        </div>\r\n     );\r\n});\r\n \r\nexport default Almacencollages;",{"ruleId":"152","replacedBy":"153"},{"ruleId":"154","replacedBy":"155"},{"ruleId":"156","severity":1,"message":"157","line":3,"column":1,"nodeType":"158","endLine":28,"endColumn":2},{"ruleId":"159","severity":1,"message":"160","line":32,"column":8,"nodeType":"161","endLine":32,"endColumn":17,"suggestions":"162"},{"ruleId":"163","severity":1,"message":"164","line":8,"column":38,"nodeType":"165","messageId":"166","endLine":8,"endColumn":45},{"ruleId":"163","severity":1,"message":"167","line":8,"column":64,"nodeType":"165","messageId":"166","endLine":8,"endColumn":82},{"ruleId":"159","severity":1,"message":"168","line":73,"column":8,"nodeType":"161","endLine":73,"endColumn":10,"suggestions":"169"},{"ruleId":"163","severity":1,"message":"170","line":22,"column":39,"nodeType":"165","messageId":"166","endLine":22,"endColumn":49},{"ruleId":"163","severity":1,"message":"171","line":31,"column":13,"nodeType":"165","messageId":"166","endLine":31,"endColumn":23},{"ruleId":"159","severity":1,"message":"172","line":139,"column":8,"nodeType":"161","endLine":139,"endColumn":25,"suggestions":"173"},{"ruleId":"152","replacedBy":"174"},{"ruleId":"154","replacedBy":"175"},{"ruleId":"159","severity":1,"message":"176","line":29,"column":10,"nodeType":"161","endLine":29,"endColumn":21,"suggestions":"177"},{"ruleId":"159","severity":1,"message":"178","line":171,"column":8,"nodeType":"161","endLine":171,"endColumn":18,"suggestions":"179"},{"ruleId":"159","severity":1,"message":"180","line":157,"column":8,"nodeType":"161","endLine":157,"endColumn":16,"suggestions":"181"},{"ruleId":"159","severity":1,"message":"182","line":58,"column":8,"nodeType":"161","endLine":58,"endColumn":16,"suggestions":"183"},{"ruleId":"159","severity":1,"message":"184","line":148,"column":8,"nodeType":"161","endLine":148,"endColumn":16,"suggestions":"185"},{"ruleId":"159","severity":1,"message":"186","line":156,"column":8,"nodeType":"161","endLine":156,"endColumn":18,"suggestions":"187"},{"ruleId":"159","severity":1,"message":"188","line":13,"column":7,"nodeType":"161","endLine":13,"endColumn":16,"suggestions":"189"},{"ruleId":"159","severity":1,"message":"188","line":22,"column":8,"nodeType":"161","endLine":22,"endColumn":10,"suggestions":"190"},{"ruleId":"163","severity":1,"message":"191","line":1,"column":50,"nodeType":"165","messageId":"166","endLine":1,"endColumn":59},{"ruleId":"163","severity":1,"message":"192","line":6,"column":8,"nodeType":"165","messageId":"166","endLine":6,"endColumn":16},{"ruleId":"163","severity":1,"message":"193","line":13,"column":10,"nodeType":"165","messageId":"166","endLine":13,"endColumn":28},{"ruleId":"163","severity":1,"message":"194","line":13,"column":30,"nodeType":"165","messageId":"166","endLine":13,"endColumn":48},{"ruleId":"163","severity":1,"message":"195","line":13,"column":50,"nodeType":"165","messageId":"166","endLine":13,"endColumn":73},{"ruleId":"163","severity":1,"message":"196","line":13,"column":75,"nodeType":"165","messageId":"166","endLine":13,"endColumn":101},{"ruleId":"163","severity":1,"message":"197","line":13,"column":103,"nodeType":"165","messageId":"166","endLine":13,"endColumn":122},{"ruleId":"163","severity":1,"message":"198","line":13,"column":124,"nodeType":"165","messageId":"166","endLine":13,"endColumn":142},{"ruleId":"163","severity":1,"message":"199","line":13,"column":144,"nodeType":"165","messageId":"166","endLine":13,"endColumn":174},{"ruleId":"163","severity":1,"message":"200","line":30,"column":13,"nodeType":"165","messageId":"166","endLine":30,"endColumn":17},{"ruleId":"163","severity":1,"message":"201","line":30,"column":19,"nodeType":"165","messageId":"166","endLine":30,"endColumn":24},{"ruleId":"163","severity":1,"message":"170","line":30,"column":26,"nodeType":"165","messageId":"166","endLine":30,"endColumn":36},{"ruleId":"163","severity":1,"message":"202","line":30,"column":75,"nodeType":"165","messageId":"166","endLine":30,"endColumn":90},{"ruleId":"163","severity":1,"message":"167","line":30,"column":92,"nodeType":"165","messageId":"166","endLine":30,"endColumn":110},{"ruleId":"163","severity":1,"message":"203","line":31,"column":11,"nodeType":"165","messageId":"166","endLine":31,"endColumn":20},{"ruleId":"159","severity":1,"message":"204","line":41,"column":8,"nodeType":"161","endLine":41,"endColumn":25,"suggestions":"205"},"no-native-reassign",["206"],"no-negated-in-lhs",["207"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'canvasRef', 'setAlmacen', and 'setMosSeleccionado'. Either include them or remove the dependency array.","ArrayExpression",["208"],"no-unused-vars","'almacen' is assigned a value but never used.","Identifier","unusedVar","'setMosSeleccionado' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'canvasMural' and 'limpiaMural'. Either include them or remove the dependency array.",["209"],"'separacion' is assigned a value but never used.","'imgMosaico' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'limpiaColage'. Either include it or remove the dependency array.",["210"],["206"],["207"],"React Hook useEffect has a missing dependency: 'setAnimacion'. Either include it or remove the dependency array.",["211"],"React Hook useEffect has missing dependencies: 'btnCol1', 'btnCol10', 'btnCol2', 'btnCol3', 'btnCol4', 'btnCol5', 'btnCol6', 'btnCol7', 'btnCol8', 'btnCol9', 'imgList', 'inAmaUp', 'inAzClaroUp', 'inAzulFUp', 'inBlanUp', 'inFucUp', 'inGrisUp', 'inNarUp', 'inNegroUp', 'inRojoUp', and 'inVerdeUp'. Either include them or remove the dependency array.",["212"],"React Hook useEffect has missing dependencies: 'btnCirc', 'btnCuad', 'btnHexa', 'btnLinea', 'btnRombo', and 'btnTria'. Either include them or remove the dependency array.",["213"],"React Hook useEffect has missing dependencies: 'col', 'color', 'fig1', 'fig2', 'fig3', 'fig4', 'fig5', 'fig6', 'figura', 'ref', 'setFigura', 'setPintar', and 'setVariante'. Either include them or remove the dependency array.",["214"],"React Hook useEffect has missing dependencies: 'btnVar1', 'btnVar10', 'btnVar2', 'btnVar3', 'btnVar4', 'btnVar5', 'btnVar6', 'btnVar7', 'btnVar8', 'btnVar9', 'imgListV1', 'imgListV10', 'imgListV2', 'imgListV3', 'imgListV4', 'imgListV5', 'imgListV6', 'imgListV7', 'imgListV8', and 'imgListV9'. Either include them or remove the dependency array.",["215"],"React Hook useEffect has missing dependencies: 'deshabilitarVariantes' and 'iniciarVariantes'. Either include them or remove the dependency array.",["216"],"React Hook useEffect has a missing dependency: 'audio'. Either include it or remove the dependency array.",["217"],["218"],"'Component' is defined but never used.","'SaveIcon' is defined but never used.","'obtenerXInicialMos' is defined but never used.","'obtenerYInicialMos' is defined but never used.","'obtenerMosXSeleccionado' is defined but never used.","'obtenerXDelMosSeleccionado' is defined but never used.","'obtenerLargoAlmacen' is defined but never used.","'obtenerAltoAlmacen' is defined but never used.","'obtenerNumMosaicosXLargoImagen' is defined but never used.","'alto' is assigned a value but never used.","'largo' is assigned a value but never used.","'mosSeleccionado' is assigned a value but never used.","'canvasRef' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setAlmacenCollages'. Either include it or remove the dependency array.",["219"],"no-global-assign","no-unsafe-negation",{"desc":"220","fix":"221"},{"desc":"222","fix":"223"},{"desc":"224","fix":"225"},{"desc":"226","fix":"227"},{"desc":"228","fix":"229"},{"desc":"230","fix":"231"},{"desc":"232","fix":"233"},{"desc":"234","fix":"235"},{"desc":"236","fix":"237"},{"desc":"238","fix":"239"},{"desc":"240","fix":"241"},{"desc":"242","fix":"243"},"Update the dependencies array to be: [almacen, canvasRef, setAlmacen, setMosSeleccionado]",{"range":"244","text":"245"},"Update the dependencies array to be: [canvasMural, limpiaMural]",{"range":"246","text":"247"},"Update the dependencies array to be: [filas, columnas, limpiaColage]",{"range":"248","text":"249"},"Update the dependencies array to be: [animacion, setAnimacion]",{"range":"250","text":"251"},"Update the dependencies array to be: [btnCol1, btnCol10, btnCol2, btnCol3, btnCol4, btnCol5, btnCol6, btnCol7, btnCol8, btnCol9, imgList, inAmaUp, inAzClaroUp, inAzulFUp, inBlanUp, inFucUp, inGrisUp, inNarUp, inNegroUp, inRojoUp, inVerdeUp, variante]",{"range":"252","text":"253"},"Update the dependencies array to be: [btnCirc, btnCuad, btnHexa, btnLinea, btnRombo, btnTria, figura]",{"range":"254","text":"255"},"Update the dependencies array to be: [col, color, fig1, fig2, fig3, fig4, fig5, fig6, figura, pintar, ref, setFigura, setPintar, setVariante]",{"range":"256","text":"257"},"Update the dependencies array to be: [btnVar1, btnVar10, btnVar2, btnVar3, btnVar4, btnVar5, btnVar6, btnVar7, btnVar8, btnVar9, figura, imgListV1, imgListV10, imgListV2, imgListV3, imgListV4, imgListV5, imgListV6, imgListV7, imgListV8, imgListV9]",{"range":"258","text":"259"},"Update the dependencies array to be: [deshabilitarVariantes, iniciarVariantes, variante]",{"range":"260","text":"261"},"Update the dependencies array to be: [audio, playing]",{"range":"262","text":"263"},"Update the dependencies array to be: [audio]",{"range":"264","text":"265"},"Update the dependencies array to be: [almacenCollages, setAlmacenCollages]",{"range":"266","text":"267"},[1364,1373],"[almacen, canvasRef, setAlmacen, setMosSeleccionado]",[3933,3935],"[canvasMural, limpiaMural]",[6365,6382],"[filas, columnas, limpiaColage]",[850,861],"[animacion, setAnimacion]",[6289,6299],"[btnCol1, btnCol10, btnCol2, btnCol3, btnCol4, btnCol5, btnCol6, btnCol7, btnCol8, btnCol9, imgList, inAmaUp, inAzClaroUp, inAzulFUp, inBlanUp, inFucUp, inGrisUp, inNarUp, inNegroUp, inRojoUp, inVerdeUp, variante]",[5551,5559],"[btnCirc, btnCuad, btnHexa, btnLinea, btnRombo, btnTria, figura]",[1802,1810],"[col, color, fig1, fig2, fig3, fig4, fig5, fig6, figura, pintar, ref, setFigura, setPintar, setVariante]",[7876,7884],"[btnVar1, btnVar10, btnVar2, btnVar3, btnVar4, btnVar5, btnVar6, btnVar7, btnVar8, btnVar9, figura, imgListV1, imgListV10, imgListV2, imgListV3, imgListV4, imgListV5, imgListV6, imgListV7, imgListV8, imgListV9]",[8055,8065],"[deshabilitarVariantes, iniciarVariantes, variante]",[368,377],"[audio, playing]",[614,616],"[audio]",[1763,1780],"[almacenCollages, setAlmacenCollages]"]