[{"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\index.js":"1","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\App.js":"2","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\reportWebVitals.js":"3","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\context\\salas\\salaState.js":"4","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Juegayaprende.js":"5","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\context\\salas\\salaReducer.js":"6","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\context\\salas\\salaContext.js":"7","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\types\\index.js":"8","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Header.js":"9","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Secciones.js":"10","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Almacenes.js":"11","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Horno.js":"12","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Murales.js":"13","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Collages.js":"14","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Programacion.js":"15","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\helper.js":"16","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Amosaico.js":"17","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\types\\imgbotones.js":"18","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Colores.js":"19","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Figuras.js":"20","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Mosaico.js":"21","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Variantes.js":"22","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Player.js":"23","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Sala.js":"24","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Almacencollages.js":"25","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Controles.js":"26","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Panelprograma.js":"27","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Nuevainstruccion.js":"28","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Errorinput.js":"29","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\context\\programa\\programaState.js":"30","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\context\\programa\\programaReducer.js":"31","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\context\\programa\\programaContext.js":"32","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Instruccionclass.js":"33","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Instruccion.js":"34","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Robot.js":"35","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Controlmanual.js":"36","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Footer.js":"37","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Mosaicosmagicos.js":"38","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\About.js":"39","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Galeria.js":"40","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\types\\imgmuralesgaleria.js":"41"},{"size":288,"mtime":1607660916545,"results":"42","hashOfConfig":"43"},{"size":268,"mtime":1611100345473,"results":"44","hashOfConfig":"43"},{"size":362,"mtime":499162500000,"results":"45","hashOfConfig":"43"},{"size":2475,"mtime":1611186149039,"results":"46","hashOfConfig":"43"},{"size":559,"mtime":1611100558499,"results":"47","hashOfConfig":"43"},{"size":964,"mtime":1608693114191,"results":"48","hashOfConfig":"43"},{"size":109,"mtime":1608072096972,"results":"49","hashOfConfig":"43"},{"size":2373,"mtime":1609977349157,"results":"50","hashOfConfig":"43"},{"size":3259,"mtime":1611161962900,"results":"51","hashOfConfig":"43"},{"size":5400,"mtime":1611161976812,"results":"52","hashOfConfig":"43"},{"size":11274,"mtime":1609282582710,"results":"53","hashOfConfig":"43"},{"size":6603,"mtime":1610747745629,"results":"54","hashOfConfig":"43"},{"size":10322,"mtime":1610564841233,"results":"55","hashOfConfig":"43"},{"size":10583,"mtime":1609302233739,"results":"56","hashOfConfig":"43"},{"size":9188,"mtime":1611013932770,"results":"57","hashOfConfig":"43"},{"size":3712,"mtime":1610076233128,"results":"58","hashOfConfig":"43"},{"size":2453,"mtime":1610738181344,"results":"59","hashOfConfig":"43"},{"size":14573,"mtime":1610736152556,"results":"60","hashOfConfig":"43"},{"size":11678,"mtime":1608587577386,"results":"61","hashOfConfig":"43"},{"size":9935,"mtime":1608587586781,"results":"62","hashOfConfig":"43"},{"size":13653,"mtime":1608595036442,"results":"63","hashOfConfig":"43"},{"size":19119,"mtime":1608587702494,"results":"64","hashOfConfig":"43"},{"size":1475,"mtime":1608587658724,"results":"65","hashOfConfig":"43"},{"size":3660,"mtime":1611162165270,"results":"66","hashOfConfig":"43"},{"size":12426,"mtime":1610464980761,"results":"67","hashOfConfig":"43"},{"size":5370,"mtime":1611080493078,"results":"68","hashOfConfig":"43"},{"size":2348,"mtime":1610651328739,"results":"69","hashOfConfig":"43"},{"size":10645,"mtime":1611082084479,"results":"70","hashOfConfig":"43"},{"size":149,"mtime":1609783254340,"results":"71","hashOfConfig":"43"},{"size":1522,"mtime":1610815772900,"results":"72","hashOfConfig":"43"},{"size":736,"mtime":1609977587553,"results":"73","hashOfConfig":"43"},{"size":116,"mtime":1609977530273,"results":"74","hashOfConfig":"43"},{"size":368,"mtime":1611009950866,"results":"75","hashOfConfig":"43"},{"size":1630,"mtime":1610651750482,"results":"76","hashOfConfig":"43"},{"size":5123,"mtime":1611077682768,"results":"77","hashOfConfig":"43"},{"size":2665,"mtime":1610817184969,"results":"78","hashOfConfig":"43"},{"size":394,"mtime":1611095804392,"results":"79","hashOfConfig":"43"},{"size":327,"mtime":1611094968361,"results":"80","hashOfConfig":"43"},{"size":1155,"mtime":1611096513990,"results":"81","hashOfConfig":"43"},{"size":1551,"mtime":1611184565937,"results":"82","hashOfConfig":"43"},{"size":403,"mtime":1611182498054,"results":"83","hashOfConfig":"43"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"kuyef4",{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"86"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"86"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"86"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"86"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"86"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"86"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"86"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"86"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"86"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"86"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"169"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\index.js",[],["179","180"],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\App.js",[],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\reportWebVitals.js",[],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\context\\salas\\salaState.js",[],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Juegayaprende.js",[],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\context\\salas\\salaReducer.js",[],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\context\\salas\\salaContext.js",[],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\types\\index.js",[],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Header.js",[],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Secciones.js",[],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Almacenes.js",["181","182","183"],"import React, { useContext, useEffect } from 'react';\r\nimport salaContext from '../context/salas/salaContext'\r\nimport styles from './Almacenes.module.css';\r\n\r\nimport FolderOpenIcon from '@material-ui/icons/FolderOpen';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nimport Button from '@material-ui/core/Button';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { obtenerXInicialMos, obtenerYInicialMos, obtenerMosXSeleccionado, obtenerXDelMosSeleccionado, obtenerLargoAlmacen, obtenerAltoAlmacen, obtenerNumMosaicosXLargoImagen } from '../helper';\r\n\r\nconst Almacenes = React.forwardRef((props,ref) => {\r\n\r\n    const refInput = React.createRef();\r\n\r\n    const salaContexto = useContext(salaContext);\r\n    const { alto, largo, separacion, almacen, setAlmacen, mosSeleccionado, setMosSeleccionado, guardarAlmacen, setGuardarAlmacen } = salaContexto;\r\n    const canvasRef = ref;\r\n\r\n    useEffect(() => {\r\n        const almacenMos = localStorage.getItem('almacenMos');  //lee de localStorage la variable\r\n        if(almacenMos != null){   \r\n            const canvasAlm = canvasRef.current;\r\n            const ctxAlm = canvasAlm.getContext('2d'); //Crea el contexto donde pintará el mosaico seleccionado \r\n            ctxAlm.restore();\r\n            ctxAlm.fillStyle = 'white';\r\n            ctxAlm.strokeStyle = 'white';  \r\n            ctxAlm.fillRect(0, 0, canvasAlm.width, canvasAlm.height);\r\n            setMosSeleccionado(0);\r\n\r\n            let img = new Image();\r\n            img.src = almacenMos;\r\n\r\n            img.onload = function() {\r\n                let numMos = obtenerNumMosaicosXLargoImagen(img.naturalWidth, largo, separacion);\r\n                setAlmacen(numMos);\r\n                ctxAlm.drawImage(img, 0, 0, img.width, img.height);\r\n            }\r\n        }\r\n    }, []);\r\n\r\n\r\n    useEffect (()=>{\r\n        if (guardarAlmacen){\r\n            const canvas = canvasRef.current;\r\n            let canvasdwn = document.createElement('canvas');\r\n            canvasdwn.width = obtenerLargoAlmacen(almacen, largo, separacion); //le coloca el largo del canvas dependiendo de los mosaicos\r\n            canvasdwn.height = obtenerAltoAlmacen(alto, separacion);//coloca el alto del canvas\r\n            var destCtx = canvasdwn.getContext('2d');\r\n            destCtx.drawImage(canvas, 0, 0); //Copia la imagen del canvas del almacen al canvas que va a descargar con el tamaño mínimo necesario\r\n            let dataImg = canvasdwn.toDataURL(); //convierte la imagen a una cadena base 64\r\n            localStorage.setItem('almacenMos', dataImg); //guarda la cadena en base 64 en el Local Storage\r\n            setGuardarAlmacen(false);\r\n        }\r\n    }, [guardarAlmacen]);\r\n\r\n\r\n    const handleChange = e => {\r\n        const canvas = canvasRef.current;\r\n        const ctx = canvas.getContext('2d');\r\n        let rect = canvas.getBoundingClientRect();\r\n        let x = e.clientX - rect.left; //Obtiene coordenada X donde el usuario dio clic\r\n        let y = e.clientY - rect.top; // Obtiene coordenada Y donde el usuario dio clic\r\n        let numMos = obtenerMosXSeleccionado(x, largo, separacion); //Obtenemos el numero de mosaico seleccionado\r\n        if (numMos !== mosSeleccionado && numMos <= almacen) { //El mosaico debe ser diferente al seleccionado con anterioridad y debe ser menor al tamaño del almacen\r\n            ctx.strokeStyle = 'white'; //El color blanco del cuadro para borrar la seleccion del mosaico seleccionado con anterioridad\r\n            ctx.lineWidth = 3; //Grosor 3 para borar el marco negrocon grosor 2\r\n            let xx = obtenerXDelMosSeleccionado(mosSeleccionado, largo, separacion); //Obtiene la coordenada X del mosaico seleccionado\r\n            ctx.strokeRect(xx, 0, separacion + largo + separacion, separacion + alto + separacion); // imprime el marco blanco\r\n            ctx.strokeStyle = 'black'; //Coloca el color negro para el marco del mosaico seleccionado\r\n            ctx.lineWidth = 2; //El marco de grosor 2 para que pueda ser borrado por el marco blanco\r\n            const xInicialMos = obtenerXInicialMos(x, largo, separacion); //Se obtiene la coordenada X del marco a pintar \r\n            const yInicialMos = obtenerYInicialMos(y, alto, separacion); //Se obtiene la coordenada Y del marco a pintar \r\n            ctx.strokeRect(xInicialMos, yInicialMos, separacion + largo + separacion, separacion + alto + separacion); //Se pinta el marco negro \r\n            setMosSeleccionado(numMos);//Guarda el nuevo mosaico seleccionado   \r\n        }\r\n    }\r\n\r\n    const abrirAlmacen = e => {\r\n        const canvas = canvasRef.current;\r\n        const ctx = canvas.getContext('2d');\r\n        ctx.fillStyle = 'white';\r\n        ctx.strokeStyle = 'white';  \r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n        setMosSeleccionado(0);//Ya no hay mosaico seleccionado\r\n    \r\n        const img = new Image();\r\n        const file = e.target.files[0];\r\n        const reader = new FileReader();\r\n      \r\n        reader.addEventListener(\"load\", function () {\r\n          img.src = reader.result;\r\n        }, false);\r\n      \r\n        if (file) {\r\n          reader.readAsDataURL(file);\r\n        }\r\n    \r\n        img.onload = function() {\r\n            let numMos = obtenerNumMosaicosXLargoImagen(img.naturalWidth, largo, separacion);\r\n            setAlmacen(numMos);\r\n          ctx.drawImage(img, 0, 0, img.naturalWidth, img.naturalHeight);\r\n        };\r\n        console.log(img.naturalWidth);\r\n    }\r\n        \r\n    const eliminartodos = () => {\r\n        const canvas = canvasRef.current;\r\n        const ctx = canvas.getContext('2d');\r\n        ctx.fillStyle = 'white';\r\n        ctx.strokeStyle = 'white';  \r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n        setAlmacen(0);\r\n        setMosSeleccionado(0);//Ya no hay mosaico seleccionado\r\n    }\r\n\r\n    const borrarMos = () => {\r\n        if (mosSeleccionado > 0 && almacen > 0){  //Si existen mosaicos en el almacen y hay alguno seleccionado\r\n            const canvas = canvasRef.current;\r\n            const ctx = canvas.getContext('2d');\r\n            ctx.strokeStyle = 'white'; //El color blanco del cuadro para borrar la seleccion del mosaico seleccionado con anterioridad\r\n            ctx.lineWidth = 3; //Grosor 3 para borar el marco negrocon grosor 2\r\n            let xx = obtenerXDelMosSeleccionado(mosSeleccionado, largo, separacion); //Obtiene la coordenada X del mosaico seleccionado\r\n            ctx.strokeRect(xx, 0, separacion + largo + separacion, separacion + alto + separacion); // imprime el marco blanco\r\n            xx = obtenerXDelMosSeleccionado(mosSeleccionado+1, largo, separacion);\r\n            var imgData = ctx.getImageData(xx, 0, canvas.width-xx, canvas.height); //Obtiene la imagen  del canvas del mosaico en TRANSICION   \r\n            xx = obtenerXDelMosSeleccionado(mosSeleccionado, largo, separacion);          \r\n            ctx.putImageData(imgData, xx, 0);\r\n            setAlmacen(almacen -1);\r\n            setMosSeleccionado(0);//Ya no hay mosaico seleccionado\r\n        }\r\n    }\r\n\r\n    const guardar = () => {\r\n        if (almacen > 0){\r\n            const canvas = canvasRef.current;\r\n            if (mosSeleccionado > 0){  //Si existen mosaicos en el almacen y hay alguno seleccionado\r\n                \r\n                const ctx = canvas.getContext('2d');\r\n                ctx.strokeStyle = 'white'; //El color blanco del cuadro para borrar la seleccion del mosaico seleccionado con anterioridad\r\n                ctx.lineWidth = 3; //Grosor 3 para borar el marco negrocon grosor 2\r\n                let xx = obtenerXDelMosSeleccionado(mosSeleccionado, largo, separacion); //Obtiene la coordenada X del mosaico seleccionado\r\n                ctx.strokeRect(xx, 0, separacion + largo + separacion, separacion + alto + separacion); // imprime el marco blanco\r\n                setMosSeleccionado(0);//Ya no hay mosaico seleccionado\r\n            }\r\n            let canvasdwn = document.createElement('canvas'); //Crea el canvas que va a descargar\r\n            canvasdwn.width = obtenerLargoAlmacen(almacen, largo, separacion); //le coloca el largo del canvas dependiendo de los mosaicos\r\n            canvasdwn.height = obtenerAltoAlmacen(alto, separacion);//coloca el alto del canvas\r\n            var destCtx = canvasdwn.getContext('2d');\r\n            destCtx.drawImage(canvas, 0, 0); //Copia la imagen del canvas del almacen al canvas que va a descargar con el tamaño mínimo necesario\r\n            let downloadLink = document.createElement('a');\r\n            downloadLink.setAttribute('download', 'almacen.png');\r\n            let dataURL = canvasdwn.toDataURL('image/png');\r\n            let url = dataURL.replace(/^data:image\\/png/,'data:application/octet-stream');\r\n            downloadLink.setAttribute('href',url);\r\n            downloadLink.click();\r\n        }\r\n    }\r\n\r\n    return ( \r\n        <div className={`${styles.tercera_seccion}`} >\r\n            <div className={`${styles.contenedor_almacen}`} >\r\n                <canvas\r\n                    ref={ref}\r\n                    id='canv'\r\n                    width='1000'\r\n                    height={separacion + largo + separacion}\r\n                    onClick={handleChange}\r\n                />\r\n            </div>\r\n\r\n            <div className={`${styles.contenedor_botones}`}>\r\n                    <Button\r\n                        component=\"label\"\r\n                    >\r\n                        <input\r\n                            type=\"file\"\r\n                            id=\"fileUpload\"\r\n                            style={{ display: \"none\" }}\r\n                            onChange={abrirAlmacen}\r\n                            ref={refInput}\r\n                        />\r\n                        <FolderOpenIcon\r\n                            style={{ fontSize: 35 }}\r\n                        ></FolderOpenIcon>\r\n                    </Button>\r\n\r\n                    <Button\r\n                        type=\"button\"\r\n                        onClick={ () => guardar() }\r\n                    >\r\n                    <SaveIcon\r\n                        style={{ fontSize: 35 }}\r\n                    >\r\n                    </SaveIcon>\r\n                    </Button>\r\n\r\n                    <Button\r\n                            type=\"button\"\r\n                            onClick={ () => borrarMos() }\r\n                        >\r\n                        <HighlightOffIcon\r\n                            type=\"button\"\r\n                            fontSize=\"small\"\r\n                            style={{ color: 'blue' }}\r\n                            style={{ fontSize: 35 }}\r\n                    \r\n                        ></HighlightOffIcon>\r\n                    </Button>\r\n\r\n                    <Button\r\n                                type=\"button\"\r\n                                onClick={ () => eliminartodos() }\r\n                            >\r\n                        <DeleteOutlineIcon\r\n                            style={{ fontSize: 35 }}\r\n                        ></DeleteOutlineIcon>\r\n                    </Button>\r\n            </div>\r\n        </div> \r\n     );\r\n});\r\n\r\nAlmacenes.protoTypes = {\r\n    ref: PropTypes.node.isRequired \r\n}\r\n \r\nexport default Almacenes;","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Horno.js",[],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Murales.js",["184"],"import React, { useEffect, useContext } from 'react';\r\nimport salaContext from '../context/salas/salaContext'\r\nimport styles from './Murales.module.css';\r\n\r\nimport FolderOpenIcon from '@material-ui/icons/FolderOpen';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\nimport Button from '@material-ui/core/Button';\r\nimport PrintIcon from '@material-ui/icons/Print';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { SimpleMediaQuery, obtenerXDelMosSeleccionado, obtenerMosXSeleccionadoMu, obtenerXDelMosSeleccionadoMu, obtenerMosYSeleccionadoMu, obtenerYDelMosSeleccionadoMu } from '../helper';\r\n\r\nconst Murales = React.forwardRef((props,ref) => {\r\n\r\n    const salaContexto = useContext(salaContext);\r\n    const { alto, largo, separacion, mosSeleccionado, columnas, filas } = salaContexto;\r\n    const canvasAlmacenes = ref;  // Toma la referencia del canvas del Almacen que se pasa por parámetro en la llamada del componente\r\n    const canvasMural = React.createRef(); //Crea la referencia del canvas del Mural donde se pegan los mosaicos\r\n    const refInput = React.createRef(); //Crea la referencia al input que permite abrir el mural\r\n\r\n    const handleChange = e => {\r\n        if(mosSeleccionado > 0){\r\n            const canvasAlm = canvasAlmacenes.current; //El current del Almacen\r\n            const canvasMu = canvasMural.current;       //El current del Mural\r\n            const ctxAlm = canvasAlm.getContext('2d');  //Crea el contexto donde tomará el mosaico seleccionado\r\n            const ctxMural = canvasMu.getContext('2d'); //Crea el contexto donde pintará el mosaico seleccionado\r\n            let xx = obtenerXDelMosSeleccionado(mosSeleccionado, largo, separacion); //Obtiene la coordenada X del mosaico seleccionado\r\n            var imgMosaico = ctxAlm.getImageData(xx + separacion, separacion, largo, alto);//Toma el mosaico del almacen\r\n            let rect = canvasMu.getBoundingClientRect();\r\n            let x = e.clientX - rect.left; //Obtiene coordenada X donde el usuario dio clic\r\n            let y = e.clientY - rect.top; // Obtiene coordenada Y donde el usuario dio clic\r\n            let numMosX = obtenerMosXSeleccionadoMu(x, largo, separacion); //Obtenemos el numero de mosaico seleccionado\r\n            xx = obtenerXDelMosSeleccionadoMu(numMosX, largo, separacion); //Obtiene la coordenada X del mosaico seleccionado\r\n            let numMosY = obtenerMosYSeleccionadoMu(y, alto, separacion); //Obtenemos el numero de mosaico seleccionado\r\n            let yy = obtenerYDelMosSeleccionadoMu(numMosY, alto, separacion); //Obtiene la coordenada X del mosaico seleccionado\r\n            console.log('La Y del mosaico que le diste clic ', yy)\r\n            ctxMural.putImageData(imgMosaico, xx+1 , yy+1); //Estampa el mosaico en el Mural\r\n            let dataImg = canvasMu.toDataURL(); //convierte la imagen a una cadena base 64\r\n            localStorage.setItem('mural', dataImg); //guarda la cadena en base 64 en el Local Storage\r\n        }\r\n    }\r\n\r\n    function limpiaMuralBtn(){\r\n        const canvasMu = canvasMural.current;       //El current del Mural\r\n        const ctxMural = canvasMu.getContext('2d');\r\n        limpiaMural(ctxMural);\r\n    }\r\n\r\n    function limpiaMural(ctx){\r\n        ctx.fillStyle = 'black';\r\n        ctx.fillRect(0, 0, (columnas*largo)+(columnas+1), (filas*largo)+(filas+1));\r\n        ctx.lineWidth = 1;\r\n        ctx.strokeStyle = 'white';\r\n        for (let xx = 0; xx <= columnas; xx++) {\r\n            ctx.moveTo((alto * xx)+xx,0);\r\n            ctx.lineTo((alto * xx)+xx, (filas*alto)+(filas+1));\r\n            ctx.stroke();\r\n        }\r\n        for (let xx = 0; xx <= filas; xx++) {\r\n            ctx.moveTo(0,(largo * xx)+xx);\r\n            ctx.lineTo((largo * columnas ) + columnas,(largo * xx)+xx);\r\n            ctx.stroke();\r\n        }\r\n    }\r\n\r\n    const abrirMuralBtn = e => {\r\n           \r\n        const canvas = canvasMural.current;\r\n        const ctx = canvas.getContext('2d');\r\n        ctx.fillStyle = 'white';\r\n        ctx.strokeStyle = 'white';  \r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n      \r\n        const img = new Image();\r\n        const file = e.target.files[0];\r\n        const reader = new FileReader();\r\n     \r\n        reader.addEventListener(\"load\", function () {\r\n          img.src = reader.result;\r\n        }, false);\r\n      \r\n        if (file) {\r\n          reader.readAsDataURL(file);\r\n        }\r\n     \r\n        img.onload = function() {\r\n          ctx.drawImage(img, 0, 0, img.naturalWidth, img.naturalHeight);\r\n        };\r\n    }\r\n\r\n    const guardar = () => {\r\n\r\n            const canvas = canvasMural.current;\r\n\r\n            let canvasdwn = document.createElement('canvas'); //Crea el canvas que va a descargar\r\n            canvasdwn.width = (columnas*largo)+(columnas+1); //le coloca el largo del canvas dependiendo de los mosaicos\r\n            canvasdwn.height = (filas*alto)+(filas+1);//coloca el alto del canvas\r\n            var destCtx = canvasdwn.getContext('2d');\r\n            destCtx.drawImage(canvas, 0, 0); //Copia la imagen del canvas del almacen al canvas que va a descargar con el tamaño mínimo necesario\r\n            let downloadLink = document.createElement('a');\r\n            downloadLink.setAttribute('download', 'mural.png');\r\n            let dataURL = canvasdwn.toDataURL('image/png');\r\n            let url = dataURL.replace(/^data:image\\/png/,'data:application/octet-stream');\r\n            downloadLink.setAttribute('href',url);\r\n            downloadLink.click();\r\n    }\r\n\r\n    const imprimir = () => {\r\n        const canvas = canvasMural.current;\r\n        let canvasdwn = document.createElement('canvas'); //Crea el canvas que va a descargar\r\n        canvasdwn.width = (columnas*largo)+(columnas+1); //le coloca el largo del canvas dependiendo de los mosaicos\r\n        canvasdwn.height = (filas*alto)+(filas+1);//coloca el alto del canvas\r\n        var destCtx = canvasdwn.getContext('2d');\r\n        destCtx.drawImage(canvas, 0, 0); //Copia la imagen del canvas del almacen al canvas que va a descargar con el tamaño mínimo necesario\r\n        let downloadLink = document.createElement('a');\r\n        downloadLink.setAttribute('download', 'mural.png');\r\n        let dataURL = canvasdwn.toDataURL('image/png');\r\n/*\r\n        var windowContent = '<!DOCTYPE html>';\r\n    windowContent += '<html>'\r\n    windowContent += '<head><title>Murales</title></head>';\r\n    windowContent += '<body>'\r\n    windowContent += '<img src=\"' + dataURL + '\">';\r\n    windowContent += '</body>';\r\n    windowContent += '</html>';*/\r\n\r\n        var windowContent = '<img src=\"' + dataURL + '\">';\r\n        var printWin = window.open('','','width=800,height=600');\r\n        printWin.document.open();\r\n        printWin.document.write(windowContent);\r\n        printWin.document.close();\r\n        printWin.focus();\r\n        printWin.print();\r\n        //printWin.close();\r\n   /*     printWin.document.addEventListener('load', function() {\r\n            printWin.focus();\r\n            printWin.print();\r\n            printWin.document.close();\r\n        //    printWin.close();            \r\n        }, true); */\r\n        \r\n    }\r\n\r\n    useEffect (()=>{\r\n        const mural1 = localStorage.getItem('mural');\r\n        const canvasMu = canvasMural.current;\r\n        const ctxMural = canvasMu.getContext('2d'); //Crea el contexto donde pintará el mosaico seleccionado    \r\n        if(mural1 === null){\r\n            limpiaMural(ctxMural);\r\n        }else{\r\n            let img = new Image();\r\n            img.src = mural1;\r\n            ctxMural.restore();\r\n            ctxMural.drawImage(img, 0, 0, canvasMu.width, canvasMu.height);\r\n            img.onload = function() {\r\n                ctxMural.drawImage(img, 0, 0, canvasMu.width, canvasMu.height);\r\n            }\r\n        }\r\n        // eslint-disable-next-line\r\n    }, []);\r\n\r\n   /* console.log(SimpleMediaQuery('(max-width: 600px)'));\r\n    console.log(SimpleMediaQuery('(max-width: 700px)'));\r\n    console.log(SimpleMediaQuery('(max-width: 800px)'));\r\n    console.log(SimpleMediaQuery('(max-width: 900px)'));\r\n    console.log(SimpleMediaQuery('(max-width: 1000px)'));*/\r\n\r\n\r\n    return ( \r\n        <div className={`${styles.mural_y_toolbar}`}  >\r\n            <div className={`${styles.cont_mural}`}  >\r\n                <canvas\r\n                    ref={canvasMural}\r\n                    width={(columnas*largo)+(columnas+1)}\r\n                    height={(filas*largo)+(filas+1)}\r\n                    onClick={handleChange}\r\n                    className={`${styles.canvas_mural}`}\r\n                />\r\n            </div>\r\n            <div className={`${styles.toolbar}`}  >\r\n                    <Button\r\n                        component=\"label\"\r\n                    >\r\n                        <input\r\n                            type=\"file\"\r\n                            id=\"fileUpload\"\r\n                            style={{ display: \"none\" }}\r\n                            onChange={abrirMuralBtn}\r\n                            ref={refInput}\r\n                        />\r\n                        <FolderOpenIcon\r\n                            style={{ fontSize: 35 }}\r\n                        ></FolderOpenIcon>\r\n                    </Button>\r\n\r\n                    <Button\r\n                        type=\"button\"\r\n                        onClick={ () => guardar() }\r\n                    >\r\n                        <SaveIcon\r\n                            style={{ fontSize: 35 }}\r\n                        ></SaveIcon>\r\n                    </Button>\r\n\r\n                    <Button\r\n                        type=\"button\"\r\n                        onClick={ () => limpiaMuralBtn() }\r\n                    >\r\n                        <DeleteOutlineIcon\r\n                            style={{ fontSize: 35 }}\r\n                        ></DeleteOutlineIcon>\r\n                    </Button>\r\n\r\n                    <Button\r\n                        type=\"button\"\r\n                        onClick={ () => imprimir() }\r\n                    >\r\n                        <PrintIcon\r\n                            style={{ fontSize: 35 }}\r\n                        ></PrintIcon>\r\n                    </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n \r\nMurales.protoTypes = {\r\n    ref: PropTypes.node.isRequired \r\n}\r\n\r\nexport default Murales;","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Collages.js",["185"],"import React, { useEffect, useContext, useState } from 'react';\r\nimport salaContext from '../context/salas/salaContext'\r\nimport PropTypes from 'prop-types';\r\nimport styles from './Collages.module.css';\r\n\r\nimport FolderOpenIcon from '@material-ui/icons/FolderOpen';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\nimport Button from '@material-ui/core/Button';\r\nimport PrintIcon from '@material-ui/icons/Print';\r\n\r\nimport { obtenerXinicialCollage, obtenerYinicialCollage, obtenerLargoSeccionCollage, obtenerAltoSeccionCollage } from '../helper';\r\n\r\n\r\nconst Collages = React.forwardRef((props,ref) => {\r\n\r\n    const canvasAlmaCollage = ref;  // Toma la referencia del canvas del Almacen que se pasa por parámetro en la llamada del componente\r\n\r\n\r\n    const [filas, setFilas] = useState(3);\r\n    const [columnas, setColumnas] = useState(3);\r\n    const salaContexto = useContext(salaContext);\r\n    const {altoCollage, largoCollage } = salaContexto;\r\n    const canvasCollage = React.createRef(); //Crea la referencia del canvas del Collage donde se pegan los murales\r\n    const refInput = React.createRef(); //Crea la referencia al input que permite abrir el mural\r\n\r\n    const handleChange = e => {\r\n        const canvasAlm = canvasAlmaCollage.current; //El current del Almacen\r\n        const canvasMu = canvasCollage.current;       //El current del Mural\r\n        const ctxMural = canvasMu.getContext('2d'); //Crea el contexto donde pintará el mosaico seleccionado\r\n        let rect = canvasMu.getBoundingClientRect();\r\n        let x = e.clientX - rect.left; //Obtiene coordenada X donde el usuario dio clic\r\n        let y = e.clientY - rect.top; // Obtiene coordenada Y donde el usuario dio clic\r\n        let xIniCollage = obtenerXinicialCollage(x, columnas, largoCollage);\r\n        let yIniCollage = obtenerYinicialCollage(y, filas, altoCollage);\r\n        let xFinCollage = obtenerLargoSeccionCollage(x, columnas, largoCollage);\r\n        let yFinCollage = obtenerAltoSeccionCollage(y, filas, altoCollage);\r\n        ctxMural.drawImage(canvasAlm, 0, 0, canvasAlm.width-1, canvasAlm.height-1, xIniCollage, yIniCollage, xFinCollage, yFinCollage); //Estampa el mosaico en el Mural\r\n        let dataImg = canvasMu.toDataURL(); //convierte la imagen a una cadena base 64\r\n        localStorage.setItem('collage', dataImg); //guarda la cadena en base 64 en el Local Storage\r\n    }\r\n\r\n    function limpiaColage(){\r\n        const canvasRef = canvasCollage;\r\n        const canvas = canvasRef.current;\r\n        const ctx = canvas.getContext('2d');\r\n        ctx.lineWidth = 1;\r\n        ctx.lineCap = 'butt';\r\n        ctx.fill('nonzero');\r\n        ctx.fillStyle = 'black';\r\n        ctx.strokeStyle = 'white';\r\n        ctx.clearRect(0, 0, largoCollage,altoCollage);\r\n        ctx.fillRect(0, 0, largoCollage,altoCollage);\r\n        ctx.beginPath();\r\n        let tamColumnas =  largoCollage / columnas;\r\n        for (let xx = 0; xx < columnas; xx++) {\r\n            ctx.moveTo((tamColumnas * xx),0);\r\n            ctx.lineTo((tamColumnas * xx), altoCollage);\r\n            ctx.stroke();\r\n        }\r\n        let tamFilas = altoCollage / filas;\r\n        for (let yy = 0; yy < filas; yy++) {\r\n            ctx.moveTo(0,(tamFilas * yy));\r\n            ctx.lineTo(largoCollage,(tamFilas * yy));\r\n            ctx.stroke();\r\n        }\r\n    }\r\n\r\n    const imprimir = () => {\r\n        const canvasRef = canvasCollage;\r\n        const canvas = canvasRef.current;\r\n        let canvasdwn = document.createElement('canvas'); //Crea el canvas que va a descargar\r\n        canvasdwn.width = largoCollage; //le coloca el largo del canvas dependiendo de los mosaicos\r\n        canvasdwn.height = altoCollage;//coloca el alto del canvas\r\n        var destCtx = canvasdwn.getContext('2d');\r\n        destCtx.drawImage(canvas, 0, 0); //Copia la imagen del canvas del almacen al canvas que va a descargar con el tamaño mínimo necesario\r\n        let downloadLink = document.createElement('a');\r\n        downloadLink.setAttribute('download', 'collage.png');\r\n        let dataURL = canvasdwn.toDataURL('image/png');\r\n\r\n        var windowContent = '<img src=\"' + dataURL + '\">';\r\n        var printWin = window.open('','','width=800,height=600');\r\n        printWin.document.open();\r\n        printWin.document.write(windowContent);\r\n        printWin.document.close();\r\n        printWin.focus();\r\n        printWin.print();\r\n    }\r\n\r\n    const guardar = () => {\r\n        const canvasRef = canvasCollage;\r\n        const canvas = canvasRef.current;\r\n        let canvasdwn = document.createElement('canvas'); //Crea el canvas que va a descargar\r\n        canvasdwn.width = largoCollage; //le coloca el largo del canvas dependiendo de los mosaicos\r\n        canvasdwn.height = altoCollage;//coloca el alto del canvas\r\n        var destCtx = canvasdwn.getContext('2d');\r\n        destCtx.drawImage(canvas, 0, 0); //Copia la imagen del canvas del almacen al canvas que va a descargar con el tamaño mínimo necesario\r\n        let downloadLink = document.createElement('a');\r\n        downloadLink.setAttribute('download', 'collage.png');\r\n        let dataURL = canvasdwn.toDataURL('image/png');\r\n        let url = dataURL.replace(/^data:image\\/png/,'data:application/octet-stream');\r\n        downloadLink.setAttribute('href',url);\r\n        downloadLink.click();\r\n    }\r\n\r\n    const abrirCollageBtn = e => {\r\n        const canvasRef = canvasCollage;\r\n        const canvas = canvasRef.current;\r\n        const ctx = canvas.getContext('2d');\r\n        ctx.fillStyle = 'black';\r\n        ctx.strokeStyle = 'white';  \r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n      \r\n        const img = new Image();\r\n        const file = e.target.files[0];\r\n        const reader = new FileReader();\r\n        reader.addEventListener(\"load\", function () {\r\n          img.src = reader.result;\r\n        }, false);\r\n      \r\n        if (file) {\r\n          reader.readAsDataURL(file);\r\n        }\r\n     \r\n        img.onload = function() {\r\n          ctx.drawImage(img, 0, 0, img.naturalWidth, img.naturalHeight);\r\n        };\r\n    }\r\n\r\n    const asignarFilas = e => {\r\n        setFilas(e.target.value);\r\n    }\r\n\r\n    const asignarColumnas = e => {\r\n        setColumnas(e.target.value);\r\n    }\r\n    \r\n    useEffect(() => {\r\n        const collage = localStorage.getItem('collage');\r\n        const canvasRef = canvasCollage;\r\n        const canvas = canvasRef.current;\r\n        const ctx = canvas.getContext('2d');\r\n        if(collage === null){\r\n            console.log('No hay nada en Storage')\r\n            limpiaColage();  \r\n        }else{\r\n            console.log('Si hay algo');\r\n            let img = new Image();\r\n            img.src = collage;\r\n            ctx.restore();\r\n            ctx.drawImage(img, 0,0,canvas.width, canvas.height)\r\n            img.onload = function() {\r\n                ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\r\n            }\r\n        } \r\n    }, [])\r\n\r\n    useEffect(() => {   \r\n        limpiaColage(); \r\n        // eslint-disable-next-line\r\n    }, [filas, columnas])\r\n\r\n    return ( \r\n        <div className={`${styles.collages_y_toolbar}`}  >\r\n            <div className={`${styles.cont_collage}`}  >\r\n                <canvas\r\n                    ref={canvasCollage}\r\n                    width={largoCollage}\r\n                    height={altoCollage}\r\n                    onClick={handleChange}\r\n                />\r\n            </div>\r\n            <div className={`${styles.toolbar}`}  >\r\n                <p>Filas.</p>\r\n                <select \r\n                    id='filas'\r\n                    onChange={asignarFilas}\r\n                    className={`${styles.selector}`}\r\n                    defaultValue= \"3\">\r\n                    <option value=\"1\">1</option>\r\n                    <option value=\"2\">2</option>\r\n                    <option value=\"3\">3</option>\r\n                    <option value=\"4\">4</option>\r\n                    <option value=\"5\">5</option>\r\n                </select>\r\n\r\n                <p>Columnas.</p>\r\n                <select \r\n                    id='columnas' \r\n                    onChange={asignarColumnas}\r\n                    className={`${styles.selector}`}\r\n                    defaultValue= \"3\">\r\n                    <option value=\"1\">1</option>\r\n                    <option value=\"2\">2</option>\r\n                    <option value=\"3\">3</option>\r\n                    <option value=\"4\">4</option>\r\n                    <option value=\"5\">5</option>\r\n                </select>\r\n\r\n                            <Button\r\n                                component=\"label\"\r\n                            >\r\n                                <input\r\n                                    type=\"file\"\r\n                                    id=\"fileUpload\"\r\n                                    style={{ display: \"none\" }}\r\n                                    onChange={abrirCollageBtn}\r\n                                    ref={refInput}\r\n                                />\r\n                                <FolderOpenIcon\r\n                                    style={{ fontSize: 35 }}\r\n                                ></FolderOpenIcon>\r\n                            </Button>\r\n\r\n                            <Button\r\n                                type=\"button\"\r\n                                onClick={ () => guardar() }\r\n                            >\r\n                            <SaveIcon\r\n                                style={{ fontSize: 35 }}\r\n                            >\r\n                            </SaveIcon>\r\n                            </Button>\r\n\r\n                            <Button\r\n                                        type=\"button\"\r\n                                        onClick={ () => limpiaColage() }\r\n                                    >\r\n                                <DeleteOutlineIcon\r\n                                    style={{ fontSize: 35 }}\r\n                                ></DeleteOutlineIcon>\r\n                            </Button>\r\n\r\n                            <Button\r\n                                        type=\"button\"\r\n                                        onClick={ () => imprimir() }\r\n                                    >\r\n                                <PrintIcon\r\n                                    style={{ fontSize: 35 }}\r\n                                ></PrintIcon>\r\n                            </Button>          \r\n                </div>\r\n            </div>\r\n     );\r\n});\r\n\r\nCollages.protoTypes = {\r\n    ref: PropTypes.node.isRequired \r\n}\r\n \r\nexport default Collages;","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Programacion.js",["186","187","188","189","190"],"import React, { Fragment, useEffect, useContext } from 'react';\r\nimport salaContext from '../context/salas/salaContext'\r\nimport styles from './Programacion.module.css';\r\nimport Controles from './Controles';\r\nimport Controlmanual from './Controlmanual';\r\nimport Panelprograma from './Panelprograma';\r\n\r\nimport FolderOpenIcon from '@material-ui/icons/FolderOpen';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\nimport Button from '@material-ui/core/Button';\r\nimport PrintIcon from '@material-ui/icons/Print';\r\nimport PropTypes from 'prop-types';\r\nimport { SimpleMediaQuery } from '../helper';\r\n\r\n\r\n\r\n\r\nconst Programacion = React.forwardRef((props,ref) => {\r\n    const salaContexto = useContext(salaContext);\r\n    const { alto, largo, separacion, mosSeleccionado, columnas, filas } = salaContexto;\r\n    const canvasAlmacenes = ref;  // Toma la referencia del canvas del Almacen que se pasa por parámetro en la llamada del componente\r\n    const canvasMural = React.createRef(); //Crea la referencia del canvas del Mural donde se pegan los mosaicos\r\n    const refInput = React.createRef(); //Crea la referencia al input que permite abrir el mural\r\n    let fontsize = 35; //el tamaño de los botones del toolbar y depende del tamaño de pantalla\r\n    /***********************************/  \r\n    /*FUNCIONES DE LA SALA MURALES */\r\n    /******************************** */\r\n    function limpiaMuralBtn(){\r\n        const canvasMu = canvasMural.current;       //El current del Mural\r\n        const ctxMural = canvasMu.getContext('2d');\r\n        limpiaMural(ctxMural);\r\n    }\r\n\r\n    function limpiaMural(ctx){\r\n        ctx.fillStyle = 'black';\r\n        ctx.fillRect(0, 0, (columnas*largo)+(columnas+1), (filas*largo)+(filas+1));\r\n        ctx.lineWidth = 1;\r\n        ctx.strokeStyle = 'white';\r\n        for (let xx = 0; xx <= columnas; xx++) {\r\n            ctx.moveTo((alto * xx)+xx,0);\r\n            ctx.lineTo((alto * xx)+xx, (filas*alto)+(filas+1));\r\n            ctx.stroke();\r\n        }\r\n        for (let xx = 0; xx <= filas; xx++) {\r\n            ctx.moveTo(0,(largo * xx)+xx);\r\n            ctx.lineTo((largo * columnas ) + columnas,(largo * xx)+xx);\r\n            ctx.stroke();\r\n        }\r\n    }\r\n\r\n    const abrirMuralBtn = e => {\r\n        const canvas = canvasMural.current;\r\n        const ctx = canvas.getContext('2d');\r\n        ctx.fillStyle = 'white';\r\n        ctx.strokeStyle = 'white';  \r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n      \r\n        const img = new Image();\r\n        const file = e.target.files[0];\r\n        const reader = new FileReader();\r\n     \r\n        reader.addEventListener(\"load\", function () {\r\n          img.src = reader.result;\r\n        }, false);\r\n      \r\n        if (file) {\r\n          reader.readAsDataURL(file);\r\n        }\r\n     \r\n        img.onload = function() {\r\n          ctx.drawImage(img, 0, 0, img.naturalWidth, img.naturalHeight);\r\n        };\r\n    }\r\n\r\n    const guardar = () => {\r\n            const canvas = canvasMural.current;\r\n            let canvasdwn = document.createElement('canvas'); //Crea el canvas que va a descargar\r\n            canvasdwn.width = (columnas*largo)+(columnas+1); //le coloca el largo del canvas dependiendo de los mosaicos\r\n            canvasdwn.height = (filas*alto)+(filas+1);//coloca el alto del canvas\r\n            var destCtx = canvasdwn.getContext('2d');\r\n            destCtx.drawImage(canvas, 0, 0); //Copia la imagen del canvas del almacen al canvas que va a descargar con el tamaño mínimo necesario\r\n            let downloadLink = document.createElement('a');\r\n            downloadLink.setAttribute('download', 'mural.png');\r\n            let dataURL = canvasdwn.toDataURL('image/png');\r\n            let url = dataURL.replace(/^data:image\\/png/,'data:application/octet-stream');\r\n            downloadLink.setAttribute('href',url);\r\n            downloadLink.click();\r\n    }\r\n\r\n    const imprimir = () => {\r\n        const canvas = canvasMural.current;\r\n        let canvasdwn = document.createElement('canvas'); //Crea el canvas que va a descargar\r\n        canvasdwn.width = (columnas*largo)+(columnas+1); //le coloca el largo del canvas dependiendo de los mosaicos\r\n        canvasdwn.height = (filas*alto)+(filas+1);//coloca el alto del canvas\r\n        var destCtx = canvasdwn.getContext('2d');\r\n        destCtx.drawImage(canvas, 0, 0); //Copia la imagen del canvas del almacen al canvas que va a descargar con el tamaño mínimo necesario\r\n        let downloadLink = document.createElement('a');\r\n        downloadLink.setAttribute('download', 'mural.png');\r\n        let dataURL = canvasdwn.toDataURL('image/png');\r\n        var windowContent = '<img src=\"' + dataURL + '\">';\r\n        var printWin = window.open('','','width=800,height=600');\r\n        printWin.document.open();\r\n        printWin.document.write(windowContent);\r\n        printWin.document.close();\r\n        printWin.focus();\r\n        printWin.print();\r\n    }\r\n\r\n    useEffect (()=>{\r\n        \r\n        const mural1 = localStorage.getItem('mural');\r\n        const canvasMu = canvasMural.current;\r\n        const ctxMural = canvasMu.getContext('2d'); //Crea el contexto donde pintará el mosaico seleccionado    \r\n        if(mural1 === null){\r\n            limpiaMural(ctxMural);\r\n        }else{\r\n            let img = new Image();\r\n            img.src = mural1;\r\n            ctxMural.restore();\r\n            ctxMural.drawImage(img, 0, 0, canvasMu.width, canvasMu.height);\r\n            img.onload = function() {\r\n                ctxMural.drawImage(img, 0, 0, canvasMu.width, canvasMu.height);\r\n            }\r\n        }\r\n        // eslint-disable-next-line\r\n    }, []);\r\n    /* ********************************* */\r\n    /* FIN DE LAS FUNCIONES DE MURALES */\r\n    /* ********************************* */\r\n\r\n    if (SimpleMediaQuery('(max-width: 1024px)')){\r\n        fontsize = 20;\r\n    }\r\n    \r\n   /* \r\n        console.log(SimpleMediaQuery('(max-width: 700px)'));\r\n        console.log(SimpleMediaQuery('(max-width: 800px)'));\r\n        console.log(SimpleMediaQuery('(max-width: 900px)'));\r\n        console.log(SimpleMediaQuery('(max-width: 1000px)')); */\r\n    return (\r\n        <div className={`${styles.cont_programacion}`}  >\r\n            <div className={`${styles.ctr_y_mural}`}  >\r\n                <Controlmanual>\r\n                </Controlmanual>\r\n                \r\n                <div className={`${styles.mural_y_toolbar}`}  >\r\n                    <div className={`${styles.cont_mural}`}  >\r\n                        <canvas\r\n                            ref={canvasMural}\r\n                            width={(columnas*largo)+(columnas+1)}\r\n                            height={(filas*largo)+(filas+1)}\r\n                            className={`${styles.canvas_mural}`}\r\n                        />\r\n                    </div>\r\n                    <div className={`${styles.toolbar}`}  >\r\n                        <Button\r\n                            component=\"label\"\r\n                            style={{minWidth: '24px'}}\r\n                        >\r\n                            <input\r\n                                type=\"file\"\r\n                                id=\"fileUpload\"\r\n                                style={{ display: \"none\" }}\r\n                                onChange={abrirMuralBtn}\r\n                                ref={refInput}\r\n                            />\r\n                            <FolderOpenIcon\r\n                                style={{ fontSize: fontsize }}\r\n                            ></FolderOpenIcon>\r\n                        </Button>\r\n                        <Button\r\n                            type=\"button\"\r\n                            onClick={ () => guardar() }\r\n                            style={{minWidth: '24px'}}\r\n                        >\r\n                            <SaveIcon\r\n                                style={{ fontSize: fontsize }}\r\n                            ></SaveIcon>\r\n                        </Button>\r\n                        <Button\r\n                            type=\"button\"\r\n                            onClick={ () => limpiaMuralBtn() }\r\n                            style={{minWidth: '24px'}}\r\n                        >\r\n                            <DeleteOutlineIcon\r\n                                style={{ fontSize: fontsize }}\r\n                            ></DeleteOutlineIcon>\r\n                        </Button>\r\n                        <Button\r\n                            type=\"button\"\r\n                            onClick={ () => imprimir() }\r\n                            style={{minWidth: '24px'}}\r\n                        >\r\n                            <PrintIcon\r\n                                style={{ fontSize: fontsize }}\r\n                            ></PrintIcon>\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={`${styles.pnl_programa}`}  >\r\n                    <Controles>\r\n                    </Controles>\r\n                    <Panelprograma>\r\n                    </Panelprograma>             \r\n            </div>\r\n             \r\n        </div>\r\n    );\r\n});\r\n \r\nexport default Programacion;","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\helper.js",["191"],"import React from 'react';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\n\r\n//Dada una coordenada en X, devuelve el valor en X donde inicia el mosaico\r\nexport function obtenerXInicialMos(x, largo, separacion){\r\n    const largoMosaico = separacion + largo + separacion;\r\n    return (Math.floor(x / largoMosaico) * largoMosaico);\r\n}\r\n\r\nexport function SimpleMediaQuery(query) {\r\n    const matches = useMediaQuery(query);\r\n    return (matches);\r\n  }\r\n\r\n//Dada una coordenada en Y, devuelve el valor en Y donde inicia el mosaico\r\nexport function obtenerYInicialMos(y, alto, separacion){\r\n    const altoMosaico = separacion + alto + separacion;\r\n    return (Math.floor(y / altoMosaico) * altoMosaico);\r\n}\r\n\r\n//Dada una coordenada en X, devuelve el valor en X donde termina el mosaico\r\nexport function obtenerXFinalMos(x, largo, separacion){\r\n    const largoMosaico = separacion + largo + separacion;\r\n    return (largoMosaico + (Math.floor(x / largoMosaico) * largoMosaico));\r\n}\r\n\r\n//Dada una coordenada en Y, devuelve el valor en Y donde termina el mosaico \r\nexport function obtenerYFinalMos(y, alto, separacion){\r\n    const altoMosaico = separacion + alto + separacion;\r\n    return (altoMosaico + (Math.floor(y / altoMosaico) * altoMosaico));\r\n}\r\n\r\n//Dada una X, devuelve el número de mosaico seleccionado\r\nexport function obtenerMosXSeleccionado(x, largo, separacion){\r\n    return (1 + Math.trunc(x / (largo + separacion + separacion)));\r\n}\r\n\r\n//Dado un mosaico, devuelve el valor en X donde inicia\r\nexport function obtenerXDelMosSeleccionado(numMosaico, largo, separacion){\r\n    return ((numMosaico - 1)*(separacion + largo + separacion));\r\n}\r\n\r\n//Dada una X, devuelve el número de mosaico seleccionado en Murales 1\r\nexport function obtenerMosXSeleccionadoMu(x, largo, separacion){\r\n    return (1 + Math.trunc(x / (largo + 1 )));\r\n}\r\n\r\n//Dado un mosaico, devuelve el valor en X donde inicia en Murales 1\r\nexport function obtenerXDelMosSeleccionadoMu(numMosaico, largo, separacion){\r\n    return ((numMosaico - 1)*(largo + 1));\r\n}\r\n\r\n//Dada una Y, devuelve el número de mosaico seleccionado en Murales 1\r\nexport function obtenerMosYSeleccionadoMu(y, alto, separacion){\r\n    return (1 + Math.trunc(y / (alto + 1 )));\r\n}\r\n\r\n//Dado un mosaico, devuelve el valor en Y donde inicia en Murales 1\r\nexport function obtenerYDelMosSeleccionadoMu(numMosaico, alto, separacion){\r\n    return ((numMosaico - 1)*(alto + 1));\r\n}\r\n\r\n//Calcula el largo del canvas que tiene el almacen dependiendo de la cantidad de mosaicos y el largo\r\nexport function obtenerLargoAlmacen(mosaicos, largo, separacion){\r\n    return (mosaicos * (separacion + largo + separacion))    \r\n}\r\n\r\n//Calcula el Alto del canvas que tiene el almacen dependiendo del alto del mosaico y la separación\r\nexport function obtenerAltoAlmacen(alto, separacion){\r\n    return (separacion + alto + separacion);    \r\n}\r\n\r\n//Devvuelve la cantidad de mosaicos que debería contener un almacen, dado el largo de la imagen\r\nexport function obtenerNumMosaicosXLargoImagen(naturalWidth, largo, separacion){\r\n    return Math.trunc(naturalWidth / (separacion + largo + separacion));\r\n}\r\n\r\nexport function obtenerXinicialCollage(x, columnas, largoCollage){\r\n    const largoSeccion = largoCollage / columnas;\r\n    return (Math.floor(x / largoSeccion) * largoSeccion); \r\n}\r\n\r\nexport function obtenerYinicialCollage(y, filas, altoCollage){\r\n    const altoSeccion = altoCollage / filas;\r\n    return (Math.floor(y / altoSeccion) * altoSeccion); \r\n}\r\n\r\nexport function obtenerLargoSeccionCollage(x, columnas, largoCollage){\r\n    return largoCollage / columnas;\r\n}\r\n\r\nexport function obtenerAltoSeccionCollage(y, filas, altoCollage){\r\n    return altoCollage / filas; \r\n}","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Amosaico.js",[],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\types\\imgbotones.js",[],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Colores.js",[],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Figuras.js",[],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Mosaico.js",[],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Variantes.js",[],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Player.js",[],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Sala.js",[],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Almacencollages.js",["192","193","194"],"import React, { useState, useContext, useEffect } from 'react';\r\nimport salaContext from '../context/salas/salaContext';\r\nimport styles from './Almacencollages.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport FolderOpenIcon from '@material-ui/icons/FolderOpen';\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst Almacencollages = React.forwardRef((props,ref) => {\r\n\r\n    const refInput = React.createRef();\r\n    const mural1 = React.createRef();\r\n    const mural2 = React.createRef();\r\n    const mural3 = React.createRef();\r\n    const mural4 = React.createRef();\r\n    const mural5 = React.createRef();\r\n    const mural6 = React.createRef();\r\n    const mural7 = React.createRef();\r\n    const mural8 = React.createRef();\r\n    const mural9 = React.createRef();\r\n    const mural10 = React.createRef();\r\n\r\n    const salaContexto = useContext(salaContext);\r\n    const { almacenCollages, setAlmacenCollages} = salaContexto;\r\n    const canvasRef = ref;\r\n    const componentsMap = [ mural1, mural2, mural3, mural4, mural5, mural6, mural7, mural8, mural9, mural10 ];\r\n\r\n    const [muralSeleccionado, setMuralSeleccionado] = useState(0);\r\n\r\n    useEffect(() => {\r\n        eliminartodos();\r\n    }, [])\r\n\r\n    useEffect (()=>{\r\n        if (almacenCollages<=0){\r\n            setAlmacenCollages(0);\r\n            setMuralSeleccionado(0);\r\n        }\r\n    }, [almacenCollages]);\r\n\r\n\r\n    const abrirAlmacen = e => {\r\n        let canvas;\r\n        switch (almacenCollages) {\r\n            case 0:\r\n                canvas = mural1.current;\r\n                break;\r\n            case 1:\r\n                canvas = mural2.current;\r\n                break;\r\n            case 2:\r\n                canvas = mural3.current;\r\n                break;\r\n            case 3:\r\n                canvas = mural4.current;\r\n                break;\r\n            case 4:\r\n                canvas = mural5.current;\r\n                break;\r\n            case 5:\r\n                canvas = mural6.current;\r\n                break;\r\n            case 6:\r\n                canvas = mural7.current;\r\n                break;\r\n            case 7:\r\n                canvas = mural8.current;\r\n                break;\r\n            case 8:\r\n                canvas = mural9.current;\r\n                break;\r\n            case 9:\r\n                canvas = mural10.current;\r\n                break;\r\n            default:\r\n                canvas = mural1.current;\r\n                break;\r\n        }\r\n            const ctx = canvas.getContext('2d');\r\n            ctx.fillStyle = 'white';\r\n            ctx.strokeStyle = 'white';  \r\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n            const img = new Image();\r\n            const file = e.target.files[0];\r\n            const reader = new FileReader();\r\n            reader.addEventListener(\"load\", function () {\r\n                img.src = reader.result;\r\n            }, false);\r\n                \r\n            if (file) {\r\n                reader.readAsDataURL(file);\r\n            }\r\n              \r\n            img.onload = function() {\r\n              ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\r\n            };\r\n            setAlmacenCollages(almacenCollages + 1);\r\n        \r\n        setMuralSeleccionado(0)\r\n    }\r\n\r\n    const handleChange = e => {\r\n        if(parseInt(e.target.parentElement.id, 10) <= almacenCollages){\r\n            setMuralSeleccionado(parseInt(e.target.parentElement.id, 10));\r\n            const canvasAlm = e.currentTarget; //El current del Almacen\r\n            const canvasSel = ref.current;       //El current del mosaico seleccionado oculto\r\n            const ctxAlm = canvasAlm.getContext('2d');  //Crea el contexto donde tomará el mosaico seleccionado\r\n            const ctxMuralSel = canvasSel.getContext('2d'); //Crea el contexto donde pintará el mosaico seleccionado\r\n            var imgMural = ctxAlm.getImageData(0,0, canvasAlm.width-1, canvasAlm.height-1);//Toma el mosaico del almacen\r\n            ctxMuralSel.putImageData(imgMural, 0, 0); //Estampa el mosaico en el Mural\r\n        }\r\n    }\r\n\r\n    const eliminartodos = () => {\r\n        let canv;\r\n        let canvas;\r\n        let ctx;\r\n        for (let index = 0; index < 10; index++) {\r\n            canv = componentsMap[index];\r\n            canvas = canv.current;\r\n            ctx = canvas.getContext('2d');\r\n            ctx.clearRect(0, 0, canvas.width, canvas.height); \r\n        }\r\n        setMuralSeleccionado(0);\r\n        setAlmacenCollages(0);\r\n    }\r\n\r\n    const borrarMural = () => {\r\n        if (muralSeleccionado > 0 && almacenCollages > 0){\r\n            let canv1;\r\n            let canv2;\r\n            let canvas1;\r\n            let canvas2;\r\n            let ctx1;\r\n            for (let index = muralSeleccionado; index < almacenCollages; index++) {\r\n                canv1 = componentsMap[index - 1];\r\n                canv2 = componentsMap[index];\r\n                canvas1 = canv1.current;\r\n                canvas2 = canv2.current;\r\n                ctx1 = canvas1.getContext('2d');\r\n                ctx1.drawImage(canvas2, 0, 0);\r\n            }\r\n            canv1 = componentsMap[almacenCollages - 1];\r\n            canvas1 = canv1.current;\r\n            ctx1 = canvas1.getContext('2d');\r\n            ctx1.clearRect(0, 0, canvas1.width, canvas1.height);\r\n            setAlmacenCollages(almacenCollages - 1 );\r\n            setMuralSeleccionado(0);\r\n        }\r\n    }\r\n\r\n\r\n    return ( \r\n        <div className={`${styles.tercera_seccion}`} >\r\n            <div className={`${styles.contenedor_almacen_collages}`} >\r\n                <div className={(1 === muralSeleccionado) ? `${styles.cont_mural_almacen_sel}` : `${styles.cont_mural_almacen}`}\r\n                    id='1'>\r\n                        <canvas className={`${styles.mural_collage}`}\r\n                            width='493px'\r\n                            height='329px'\r\n                            id='11'\r\n                            ref={mural1}\r\n                            onClick={handleChange}\r\n                        />\r\n                </div>\r\n                <div className={(2 === muralSeleccionado) ? `${styles.cont_mural_almacen_sel}` : `${styles.cont_mural_almacen}`}\r\n                    id='2'>\r\n                        <canvas className={`${styles.mural_collage}`}\r\n                            width='493px'\r\n                            height='329px'\r\n                            id='12'\r\n                            ref={mural2}\r\n                            onClick={handleChange}\r\n                        />\r\n                </div>\r\n                <div className={(3 === muralSeleccionado) ? `${styles.cont_mural_almacen_sel}` : `${styles.cont_mural_almacen}`}\r\n                    id='3'>\r\n                        <canvas className={`${styles.mural_collage}`}\r\n                            width='493px'\r\n                            height='329px'\r\n                            id='13'\r\n                            ref={mural3}\r\n                            onClick={handleChange}\r\n                        />\r\n                </div>\r\n                <div className={(4 === muralSeleccionado) ? `${styles.cont_mural_almacen_sel}` : `${styles.cont_mural_almacen}`}\r\n                    id='4'>\r\n                        <canvas className={`${styles.mural_collage}`}\r\n                            width='493px'\r\n                            height='329px'\r\n                            id='14'\r\n                            ref={mural4}\r\n                            onClick={handleChange}\r\n                        />\r\n                </div>\r\n                <div className={(5 === muralSeleccionado) ? `${styles.cont_mural_almacen_sel}` : `${styles.cont_mural_almacen}`}\r\n                    id='5'>\r\n                        <canvas className={`${styles.mural_collage}`}\r\n                            width='493px'\r\n                            height='329px'\r\n                            id='15'\r\n                            ref={mural5}\r\n                            onClick={handleChange}\r\n                        />\r\n                </div>\r\n                <div className={(6 === muralSeleccionado) ? `${styles.cont_mural_almacen_sel}` : `${styles.cont_mural_almacen}`}\r\n                    id='6'>\r\n                        <canvas className={`${styles.mural_collage}`}\r\n                            width='493px'\r\n                            height='329px'\r\n                            id='16'\r\n                            ref={mural6}\r\n                            onClick={handleChange}\r\n                        />\r\n                </div>\r\n                <div className={(7 === muralSeleccionado) ? `${styles.cont_mural_almacen_sel}` : `${styles.cont_mural_almacen}`}\r\n                    id='7'>\r\n                        <canvas className={`${styles.mural_collage}`}\r\n                            width='493px'\r\n                            height='329px'\r\n                            id='17'\r\n                            ref={mural7}\r\n                            onClick={handleChange}\r\n                        />\r\n                </div>\r\n                <div className={(8 === muralSeleccionado) ? `${styles.cont_mural_almacen_sel}` : `${styles.cont_mural_almacen}`}\r\n                    id='8'>\r\n                        <canvas className={`${styles.mural_collage}`}\r\n                            width='493px'\r\n                            height='329px'\r\n                            id='18'\r\n                            ref={mural8}\r\n                            onClick={handleChange}\r\n                        />\r\n                </div>\r\n                <div className={(9 === muralSeleccionado) ? `${styles.cont_mural_almacen_sel}` : `${styles.cont_mural_almacen}`}\r\n                    id='9'>\r\n                        <canvas className={`${styles.mural_collage}`}\r\n                            width='493px'\r\n                            height='329px'\r\n                            id='19'\r\n                            ref={mural9}\r\n                            onClick={handleChange}\r\n                        />\r\n                </div>\r\n                <div className={(10 === muralSeleccionado) ? `${styles.cont_mural_almacen_sel}` : `${styles.cont_mural_almacen}`}\r\n                    id='10'>\r\n                        <canvas className={`${styles.mural_collage}`}\r\n                            width='493px'\r\n                            height='329px'\r\n                            id='20'\r\n                            ref={mural10}\r\n                            onClick={handleChange}\r\n                        />\r\n                </div>\r\n            </div>\r\n\r\n            <div className={`${styles.contenedor_botones}`}>\r\n                    <Button\r\n                        component=\"label\"\r\n                    >\r\n                        <input\r\n                            type=\"file\"\r\n                            id=\"fileUpload\"\r\n                            style={{ display: \"none\" }}\r\n                            onChange={abrirAlmacen}\r\n                            ref={refInput}\r\n                        />\r\n                        <FolderOpenIcon\r\n                            style={{ fontSize: 35 }}\r\n                        ></FolderOpenIcon>\r\n                    </Button>\r\n\r\n                    <Button\r\n                            type=\"button\"\r\n                            onClick={ () => borrarMural() }\r\n                        >\r\n                        <HighlightOffIcon\r\n                            style={{ fontSize: 35 }}                    \r\n                        ></HighlightOffIcon>\r\n                    </Button>\r\n    \r\n                    <Button\r\n                                type=\"button\"\r\n                                onClick={ () => eliminartodos() }\r\n                            >\r\n                        <DeleteOutlineIcon\r\n                            style={{ fontSize: 35 }}\r\n                        ></DeleteOutlineIcon>\r\n                    </Button>\r\n\r\n            </div>\r\n            <canvas className={`${styles.mural_oculto}`}\r\n                            width='493px'\r\n                            height='329px'\r\n                            id='21'\r\n                            ref={ref}\r\n            />\r\n        </div>\r\n     );\r\n});\r\n\r\nAlmacencollages.protoTypes = {\r\n    ref: PropTypes.node.isRequired \r\n}\r\n \r\nexport default Almacencollages;","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Controles.js",["195","196","197","198","199","200","201","202"],"import React, {Fragment, useState, useContext} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\r\nimport StopIcon from '@material-ui/icons/Stop';\r\nimport SkipNextIcon from '@material-ui/icons/SkipNext';\r\nimport ReplayIcon from '@material-ui/icons/Replay';\r\nimport styles from './Controles.module.css';\r\nimport { SimpleMediaQuery } from '../helper';\r\nimport programaContext from '../context/programa/programaContext';\r\n\r\nconst Controles = React.forwardRef((props, ref) => {\r\n    const instruccionesContext = useContext(programaContext);\r\n    const { xx, setXX, yy, setYY, direccion, setDireccion, programa } = instruccionesContext;    \r\n\r\n    let fontsize = 35;\r\n    if (SimpleMediaQuery('(max-width: 768px)')){\r\n        fontsize = 20;\r\n    }\r\n\r\n    const [idInstruccion, setidInstruccion] = useState(-1);\r\n    const [posCol, setposCol] = useState(1);\r\n    const [posRen, setposRen] = useState(1);\r\n    const [posRobot, setposRobot] = useState([1,1]);\r\n\r\n    function origen() {\r\n        setXX(1);\r\n        setYY(1);\r\n    };\r\n    function giraRobot(grados){\r\n        console.log('El robot debe girar: ',grados )\r\n        let posicion = (grados / 90) + direccion;\r\n        if (posicion > 4){\r\n            posicion = posicion % 4;\r\n        }\r\n        console.log('Posicion anterior: ',posicion )\r\n        setDireccion(posicion);\r\n        console.log('Nueva posicion: ',posicion )\r\n    }\r\n    function avanza(casillas){\r\n        console.log('Avanza: ',casillas, ' casillas-' )\r\n        switch (direccion) {\r\n            case 1:\r\n                console.log('anterior posicion en xx: ',xx);\r\n                setXX(xx + casillas);\r\n                console.log('Nueva posicion en xx: ',xx);\r\n                break;\r\n            case 2:\r\n                console.log('anterior posicion en yy: ',yy);\r\n                setYY(yy + casillas);\r\n                console.log('Nueva posicion en yy: ',yy);\r\n                break;\r\n            case 3:\r\n                console.log('anterior posicion en xx: ',xx);\r\n                setXX(xx - casillas);\r\n                console.log('Nueva posicion en xx: ',xx);\r\n                break;\r\n            case 4:\r\n                console.log('anterior posicion en yy: ',yy);\r\n                setYY(yy - casillas);\r\n                console.log('Nueva posicion en yy: ',yy);\r\n                break;\r\n        }\r\n    }\r\n\r\n\r\n    const ejecuta = (instruccion, milliseconds) => {\r\n        console.log('Direccion: ', direccion, 'Casilla en X: ', xx, 'Casilla en Y: ', yy);\r\n        console.log('Instruccion id: ', instruccion.id, 'Instrucción tipo: ', instruccion.nombre, 'instruccion n:', instruccion.n);\r\n        switch (instruccion.tipo) {\r\n            case 1:\r\n                origen();\r\n                break;\r\n            case 5:\r\n                giraRobot(instruccion.n);\r\n                break;\r\n            case 7:\r\n                avanza(instruccion.n);\r\n                break;\r\n        }\r\n        return new Promise(resolve => setTimeout(resolve, milliseconds))\r\n    }\r\n\r\n    const espera = (milliseconds) => {\r\n        \r\n        return new Promise(resolve => setTimeout(resolve, milliseconds))\r\n    }\r\n\r\n    const ejecutar = e => { \r\n        const doSomething = async () => {\r\n            for (const instruccion of programa) {\r\n                await espera(2000);\r\n                console.log('antes de ejecutar ', instruccion.nombre)  \r\n                await ejecuta(instruccion, 2000)\r\n                console.log('después de ejecutar ', instruccion.nombre)    \r\n            }\r\n            console.log('FIN');\r\n        }\r\n        if (programa.length < 1){\r\n            alert('Programa vacío')\r\n        }else{ \r\n            doSomething()\r\n        }\r\n\r\n    }\r\n    const stop = e => { \r\n        alert('stop');\r\n    }\r\n    const next = e => { \r\n        alert('next');\r\n    }\r\n    const reset = e => { \r\n        setposCol(1);\r\n        setposRen(1);\r\n        setposRobot([1,1]);\r\n    }\r\n\r\n    return ( \r\n        <div className={`${styles.cont_controles}`}  >\r\n            <Button \r\n                style={{minWidth: '24px'}}\r\n                type=\"button\"\r\n                onClick={e => stop()}\r\n            >\r\n                <StopIcon\r\n                    style={{ minWidth: '24px', fontSize: fontsize }}\r\n                ></StopIcon>\r\n            </Button>\r\n            <Button\r\n                style={{minWidth: '24px'}}\r\n                type=\"button\"\r\n                onClick={e => ejecutar()}\r\n            >\r\n                <PlayArrowIcon\r\n                    style={{ minWidth: '24px', fontSize: fontsize  }}\r\n                ></PlayArrowIcon>\r\n            </Button>\r\n            <Button\r\n                type=\"button\"\r\n                onClick={e => next()}\r\n                style={{minWidth: '24px'}}\r\n            >\r\n                <SkipNextIcon\r\n                    style={{ minWidth: '24px', fontSize: fontsize  }}\r\n                ></SkipNextIcon>\r\n            </Button>\r\n            <Button\r\n                type=\"button\"\r\n                onClick={e => reset()}\r\n                style={{minWidth: '24px'}}\r\n            >\r\n                <ReplayIcon\r\n                    \r\n                    style={{ minWidth: '24px', fontSize: fontsize }}\r\n                ></ReplayIcon>\r\n            </Button>\r\n        </div>\r\n     );\r\n});\r\n \r\nexport default Controles;","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Panelprograma.js",[],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Nuevainstruccion.js",["203","204"],"import React, { Fragment, useState, useEffect, useContext } from 'react';\r\nimport Instruccionclass from './Instruccionclass';\r\nimport Errorinput from './Errorinput';\r\nimport programaContext from '../context/programa/programaContext';\r\n\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport styles from './Nuevainstruccion.module.css';\r\n\r\nconst Nuevainstruccion = (props) => {\r\n\r\n    const instruccionesContext = useContext(programaContext);\r\n    const { programa, agregarInstruccion } = instruccionesContext;\r\n\r\n\r\n    let {nvaInstruccion, setnvaInstruccion} = props;\r\n    const [tipoInstruccion, settipoInstruccion] = useState(0);\r\n    const [nombreInstruccion, setnombreInstruccion] = useState('')\r\n    const [tituloInstruccion, setTituloInstruccion] = useState('');\r\n    const [parametron, setParametron] = useState(0);\r\n    const [errorinput, setErrorinput] = useState(false);\r\n    const [mensajeerror, setMensajeerror] = useState('');\r\n    /*Hay 11 tipos de instrucciónes */\r\n\r\n    useEffect(() => {\r\n        setErrorinput(false);\r\n        setParametron(0);\r\n    }, [tipoInstruccion]);//Cuando se cambia el tipo de instrucción (cambio en el select )\r\n\r\n    const asignarInstruccion = e => {\r\n        settipoInstruccion(parseInt(e.target.value));\r\n        let titulo = ' ';\r\n        switch (parseInt(e.target.value)) {\r\n            case 1:\r\n                titulo = 'Ir al origen';\r\n                break;\r\n            case 2:\r\n                titulo='Ir al mosaico n';\r\n                break;\r\n            case 3:\r\n                titulo='Cargar mosaico';\r\n                break;\r\n            case 4:\r\n                titulo='Descarga mosaico';\r\n                break;\r\n            case 5:\r\n                titulo='Gira Robot';\r\n                break;\r\n            case 6:\r\n                titulo='Gira Mosaico';\r\n                break;\r\n            case 7:\r\n                titulo='Avanza Robot';\r\n                break;\r\n            case 8:\r\n                titulo='Mientras';\r\n                break;\r\n            case 9:\r\n                titulo='Repite';\r\n                break;\r\n            case 10:\r\n                titulo='Condición Si..Entonces';\r\n                break;\r\n            case 11:\r\n                titulo = 'Subrutina';\r\n                break;\r\n            default:\r\n                titulo = 'Ir al origen';\r\n                break;\r\n        } \r\n        setnombreInstruccion(titulo)\r\n        setTituloInstruccion(titulo);\r\n    }\r\n\r\n    const gotoMosaicoN = e => {\r\n        setParametron(parseInt(e.target.value, 10));\r\n    }\r\n\r\n    const giraRobot = e => {\r\n        setParametron(parseInt(e.target.value, 10) * 90);\r\n    }\r\n\r\n    const giramosaico = e => {\r\n        setParametron(parseInt(e.target.value, 10) * 90);\r\n    }\r\n\r\n    const avanzaRobot = e => {\r\n        setParametron(parseInt(e.target.value, 10));\r\n    }\r\n\r\n    function validarParametros(){\r\n        let error = false;\r\n        let mensaje = '';\r\n        switch (tipoInstruccion) {\r\n            case 0: //No hay instrucción seleccionada\r\n                error = true;\r\n                mensaje = 'Selecciona la instrucción que deseas agregar';\r\n                break;\r\n            case 1: //No necesita parámetros ir al Origen\r\n                break;\r\n            case 2: //Ir al Mosaico N del almacen ahorita está limitado a 10 mosaicos\r\n                if ((parametron <= 0) || (parametron > 10)){\r\n                    error = true;\r\n                    mensaje = 'Selecciona un mosaico que exista en el almacen';\r\n                }\r\n                break;\r\n            case 3: //Carga mosaico no necesita parámetros\r\n                break;\r\n            case 4: //Descarga mosaicos no necesita parámetros\r\n                break;\r\n            case 5: // Gira Robot necesita parámetros\r\n                if((parametron <= 0)||(parametron > 360)){\r\n                    error = true;\r\n                    mensaje = 'El giro debe ser mayor a 0 grados y menor a 360 grados';\r\n                }\r\n                break;\r\n            case 6: // Gira Mosaico necesita parámetros\r\n                if((parametron <= 0)||(parametron > 360)){\r\n                    error = true;\r\n                    mensaje = 'El giro debe ser mayor a 0 grados y menor a 360 grados';\r\n                }\r\n                break;\r\n            case 7: // Avanza Robot necesita parámetros de numero de casillas\r\n                if((parametron <= 0)||(parametron > 30)){\r\n                    error = true;\r\n                    mensaje = 'El robot solo se puede mover en un valor menor a 30';\r\n                }\r\n                break;\r\n            case 8:\r\n                error = true;\r\n                mensaje = 'La instrucción Mientras no ha sido implementada';\r\n                break;\r\n            case 9:\r\n                error = true;\r\n                mensaje = 'La instrucción Repite no ha sido implementada';\r\n                break;\r\n            case 10:\r\n                error = true;\r\n                mensaje = 'La instrucción IF no ha sido implementada';\r\n                break;\r\n            case 11:\r\n                error = true;\r\n                mensaje = 'La instrucción Subrutina no ha sido implementada';\r\n                break;\r\n            default:\r\n                setErrorinput(true);\r\n                setMensajeerror('Selecciona la instrucción que deseas agregar');\r\n                break;\r\n        }\r\n        setErrorinput(error);\r\n        setMensajeerror(mensaje);\r\n        if(!error){\r\n            let ins = new Instruccionclass(programa.length, tipoInstruccion, parametron, nombreInstruccion);\r\n            agregarInstruccion(ins);\r\n            setnvaInstruccion(false);\r\n        }\r\n    }\r\n    \r\n    return ( \r\n        <Fragment>\r\n            <div className={`${styles.nuevaInstruccion}`}>\r\n                <div>\r\n                   <label className={`${styles.tituloInstruccion}`}>{tituloInstruccion}</label> \r\n                </div>\r\n                <div className={`${styles.tipoinstruccion}`}>\r\n                    <select \r\n                        id='tipoinstruccion' \r\n                        onChange={asignarInstruccion}\r\n                        defaultValue= \"0\">\r\n                        <option value=\"0\">Selecciona</option>\r\n                        <option value=\"1\">Origen</option>\r\n                    {/*   <option value=\"2\">Mosaico n</option>  */}\r\n                    {/*    <option value=\"3\">Carga mosaico</option> */}\r\n                    {/*    <option value=\"4\">Descarga mosaico</option> */}\r\n                        <option value=\"5\">Gira Robot</option>\r\n                    {/*    <option value=\"6\">Gira Mosaico</option> */}\r\n                        <option value=\"7\">Avanza Robot</option>\r\n                    {/*    <option value=\"8\">Mientras</option>\r\n                        <option value=\"9\">Repite</option>\r\n                        <option value=\"10\">Si (condicion) entonces</option>\r\n                        <option value=\"11\">Subrutina</option> */}\r\n                    </select>\r\n                </div>\r\n                {(2 === tipoInstruccion)?(\r\n                    <select \r\n                    id='mosaicoalmacen' \r\n                    onChange={gotoMosaicoN}\r\n                    defaultValue= \"0\">\r\n                    <option value=\"0\">Selecciona un valor</option>\r\n                    <option value=\"1\">Ir al mosaico 1</option>\r\n                    <option value=\"2\">Ir al mosaico 2</option>\r\n                    <option value=\"3\">Ir al mosaico 3</option>\r\n                    <option value=\"4\">Ir al mosaico 4</option>\r\n                    <option value=\"5\">Ir al mosaico 5</option>\r\n                    <option value=\"6\">Ir al mosaico 6</option>\r\n                    <option value=\"7\">Ir al mosaico 7</option>\r\n                    <option value=\"8\">Ir al mosaico 8</option>\r\n                    <option value=\"9\">Ir al mosaico 9</option>\r\n                    <option value=\"10\">Ir al mosaico 10</option>\r\n                </select>\r\n                )\r\n                :null}\r\n\r\n                {(5 === tipoInstruccion)?(\r\n                    <select \r\n                    id='girarobot' \r\n                    onChange={giraRobot}\r\n                    defaultValue= \"0\">\r\n                    <option value=\"0\">Selecciona un valor</option>\r\n                    <option value=\"1\">Gira Robot 90 grados</option>\r\n                    <option value=\"2\">Gira Robot 180 grados</option>\r\n                    <option value=\"3\">Gira Robot 270 grados</option>\r\n                </select>\r\n                )\r\n                :null}\r\n\r\n                {(6 === tipoInstruccion)?(\r\n                    <select \r\n                    id='giramosaico' \r\n                    onChange={giramosaico}\r\n                    defaultValue= \"0\">  \r\n                    <option value=\"0\">Selecciona un valor</option>\r\n                    <option value=\"1\">Gira el mosaico 90 grados</option>\r\n                    <option value=\"2\">Gira el mosaico 180 grados</option>\r\n                    <option value=\"3\">Gira el mosaico 270 grados</option>\r\n                </select>\r\n                )\r\n                :null}\r\n\r\n                {(7 === tipoInstruccion)?(\r\n                    <select \r\n                    id='avanza' \r\n                    onChange={avanzaRobot}\r\n                    defaultValue= \"0\">\r\n                    <option value=\"0\">Selecciona un valor</option>\r\n                    <option value=\"1\">1 casilla</option>\r\n                    <option value=\"2\">2 casilla</option>\r\n                    <option value=\"3\">3 casilla</option>\r\n                    <option value=\"4\">4 casilla</option>\r\n                    <option value=\"5\">5 casilla</option>\r\n                    <option value=\"6\">6 casilla</option>\r\n                    <option value=\"7\">7 casilla</option>\r\n                    <option value=\"8\">8 casilla</option>\r\n                    <option value=\"9\">9 casilla</option>\r\n                </select>\r\n                )\r\n                :null}\r\n\r\n                <div>\r\n                    {(errorinput) ? <Errorinput mensaje = {mensajeerror} /> : null}\r\n                    <Button\r\n                        type=\"button\"\r\n                        onClick={ () => setnvaInstruccion(false) }\r\n                        style={{minWidth: '4px'}}\r\n                    >Cancelar</Button>\r\n                    <Button\r\n                        type=\"button\"\r\n                        onClick={ () => validarParametros() }\r\n                    >Aceptar</Button>\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n     );\r\n}\r\n \r\nexport default Nuevainstruccion;","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Errorinput.js",[],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\context\\programa\\programaState.js",[],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\context\\programa\\programaReducer.js",["205"],"\r\nimport { AGREGAR_INSTRUCCION, SET_XX, SET_YY, SET_DIRECCION } from '../../types'; \r\n\r\nexport default (state, action) => {\r\n    switch (action.type) {\r\n        case AGREGAR_INSTRUCCION:\r\n            return {\r\n                ...state,\r\n                programa: [...state.programa, action.payload]\r\n            }\r\n        case SET_XX:\r\n            return {\r\n                ...state,\r\n                xx: action.payload\r\n            }\r\n        case SET_YY:\r\n            return {\r\n                ...state,\r\n                yy: action.payload\r\n            }\r\n        case SET_DIRECCION:\r\n            return {\r\n                ...state,\r\n                direccion: action.payload\r\n            }\r\n        default : return state;\r\n    }\r\n}","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\context\\programa\\programaContext.js",[],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Instruccionclass.js",[],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Instruccion.js",[],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Robot.js",["206","207","208"],"import React, { Fragment, useState, useContext, useEffect } from 'react';\r\nimport programaContext from '../context/programa/programaContext';\r\nimport salaContext from '../context/salas/salaContext'\r\n\r\n\r\nimport styles from './Robot.module.css';\r\nimport Button from '@material-ui/core/Button';\r\nimport ArrowRightIcon from '@material-ui/icons/ArrowRight';\r\nimport ArrowLeftIcon from '@material-ui/icons/ArrowLeft';\r\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\r\nimport ArrowDropUpIcon from '@material-ui/icons/ArrowDropUp';\r\nimport AndroidIcon from '@material-ui/icons/Android';\r\nimport {useSpring, animated, interpolate} from 'react-spring'\r\n\r\nconst Robot = React.forwardRef((props, ref) => {\r\n    const instruccionesContext = useContext(programaContext);\r\n    const { xx, yy, direccion } = instruccionesContext;\r\n\r\n    const salaContexto = useContext(salaContext);\r\n    const { alto, largo } = salaContexto; //alto y largo del mosaico\r\n\r\n    // 1 = derecha, 2=Abajo, 3=Izquierda, 4=arriba\r\n   // const [direccion, setDireccion] = useState(1); \r\n\r\n\r\n   /*La formula para obtener las coordenadas X y Y= \r\n        xx= posicion en casillas del robot en coordenada x \r\n        yy= posicion en casillas del robot en coordenada y\r\n        en un inicio debe estar en el [1,1] pero se le resta 1 porque en el mural debe estar en el [0,0]\r\n         40*(xx-1) = es el tamaño del mosaico (40) multiplicado por la casilla donde debe estar\r\n         +(xx-1) = cada casilla que avanza el robot se le debe incrementar 1 pixel por la linea blanca divisoria del mural\r\n         en Y además se le suman 50 pixeles que son los de los controles manuales\r\n   */\r\n    const {xyz} = useSpring({\r\n        from: {xyz: [0, 0, 0]},\r\n        xyz: [(40*(xx-1))+(xx-1), (40*(yy-1))+(yy-1) + 50, 0], config: { duration: 500 }\r\n      });\r\n\r\n    useEffect(e => {\r\n        const canvasRef = ref;\r\n        const canvas = canvasRef.current;\r\n        const ctx = canvas.getContext('2d');\r\n        ctx.clearRect(0, 0, largo, alto);  //Limpia el mosaico de arriba para crear un nuevo mosaic\r\n        ctx.fillStyle = 'LightGray'; //Estblece color de relleno blanco\r\n        ctx.strokeStyle = 'white'; //Estblece color de relleno blanco\r\n        ctx.fillRect(0, 0, largo, alto);\r\n        ctx.strokeStyle = 'red';\r\n\r\n        ctx.beginPath(); \r\n        // Staring point (10,45)\r\n        ctx.moveTo(0,0);\r\n        ctx.lineTo(largo, alto);\r\n        ctx.stroke();\r\n        ctx.moveTo(largo,0);\r\n        ctx.lineTo(0, alto);\r\n        ctx.stroke();\r\n        ctx.rect(0,0,largo, alto );\r\n        ctx.stroke();\r\n        // eslint-disable-next-line\r\n    }, []);\r\n\r\n    return ( \r\n        <Fragment>\r\n            <div className={`${styles.robot}`}  >\r\n                <animated.div \r\n                    style={{\r\n                        transform: xyz.interpolate((x, y, z) => `translate3d(${x}px, ${y}px, ${z}px)`)\r\n                    }}\r\n                >\r\n                    <AndroidIcon\r\n                        className={`${styles.color}`}\r\n                        style={{ minHeight: 1, fontSize: 35  }}\r\n                        viewBox='-2 0 25 10'\r\n                    ></AndroidIcon>\r\n                    <div className={`${styles.divmosaicoRobot}`}>\r\n                        <canvas\r\n                            width='40px'\r\n                            height='40px'\r\n                            className={`${styles.canvas_mosaico_robot}`}\r\n                            ref={ref}\r\n                        />\r\n                    </div>\r\n                    {(1 === direccion)?(\r\n                        <ArrowRightIcon\r\n                            className={`${styles.color}`}\r\n                            style={{ minHeight: 15, minWidth:15, fontSize: 35   }}\r\n                            viewBox='5 10 11 20'\r\n                        ></ArrowRightIcon>\r\n                        )\r\n                        :null}\r\n\r\n                    {(2 === direccion)?(\r\n                        <ArrowDropDownIcon\r\n                            className={`${styles.color}`}\r\n                            style={{ fontSize: 35   }}\r\n                            viewBox='5 10 11 20'\r\n                        ></ArrowDropDownIcon>\r\n                        \r\n                    )\r\n                    :null}\r\n                    {(3 === direccion)?(\r\n                        <ArrowLeftIcon\r\n                            className={`${styles.color}`}\r\n                            style={{ fontSize: 35   }}\r\n                            viewBox='5 10 11 20'\r\n                        ></ArrowLeftIcon>\r\n                        \r\n                        )\r\n                        :null}\r\n                    {(4 === direccion)?(\r\n                        <ArrowDropUpIcon\r\n                            className={`${styles.color}`}\r\n                            style={{ fontSize: 35   }}\r\n                            \r\n                        ></ArrowDropUpIcon>\r\n                        \r\n                        )\r\n                        :null}\r\n                </animated.div>\r\n            </div>\r\n        </Fragment>\r\n     );\r\n});\r\n \r\nexport default Robot;","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Controlmanual.js",[],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Footer.js",[],["209","210"],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Mosaicosmagicos.js",[],["211","212"],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\About.js",[],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Galeria.js",[],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\types\\imgmuralesgaleria.js",[],{"ruleId":"213","replacedBy":"214"},{"ruleId":"215","replacedBy":"216"},{"ruleId":"217","severity":1,"message":"218","line":42,"column":8,"nodeType":"219","endLine":42,"endColumn":10,"suggestions":"220"},{"ruleId":"217","severity":1,"message":"221","line":57,"column":8,"nodeType":"219","endLine":57,"endColumn":24,"suggestions":"222"},{"ruleId":"223","severity":1,"message":"224","line":208,"column":29,"nodeType":"225","endLine":208,"endColumn":53},{"ruleId":"226","severity":1,"message":"227","line":12,"column":10,"nodeType":"228","messageId":"229","endLine":12,"endColumn":26},{"ruleId":"217","severity":1,"message":"230","line":156,"column":8,"nodeType":"219","endLine":156,"endColumn":10,"suggestions":"231"},{"ruleId":"226","severity":1,"message":"232","line":1,"column":17,"nodeType":"228","messageId":"229","endLine":1,"endColumn":25},{"ruleId":"226","severity":1,"message":"233","line":13,"column":8,"nodeType":"228","messageId":"229","endLine":13,"endColumn":17},{"ruleId":"226","severity":1,"message":"234","line":21,"column":26,"nodeType":"228","messageId":"229","endLine":21,"endColumn":36},{"ruleId":"226","severity":1,"message":"235","line":21,"column":38,"nodeType":"228","messageId":"229","endLine":21,"endColumn":53},{"ruleId":"226","severity":1,"message":"236","line":22,"column":11,"nodeType":"228","messageId":"229","endLine":22,"endColumn":26},{"ruleId":"226","severity":1,"message":"237","line":1,"column":8,"nodeType":"228","messageId":"229","endLine":1,"endColumn":13},{"ruleId":"226","severity":1,"message":"238","line":27,"column":11,"nodeType":"228","messageId":"229","endLine":27,"endColumn":20},{"ruleId":"217","severity":1,"message":"239","line":34,"column":8,"nodeType":"219","endLine":34,"endColumn":10,"suggestions":"240"},{"ruleId":"217","severity":1,"message":"241","line":41,"column":8,"nodeType":"219","endLine":41,"endColumn":25,"suggestions":"242"},{"ruleId":"226","severity":1,"message":"232","line":1,"column":16,"nodeType":"228","messageId":"229","endLine":1,"endColumn":24},{"ruleId":"226","severity":1,"message":"243","line":20,"column":12,"nodeType":"228","messageId":"229","endLine":20,"endColumn":25},{"ruleId":"226","severity":1,"message":"244","line":20,"column":27,"nodeType":"228","messageId":"229","endLine":20,"endColumn":43},{"ruleId":"226","severity":1,"message":"245","line":21,"column":12,"nodeType":"228","messageId":"229","endLine":21,"endColumn":18},{"ruleId":"226","severity":1,"message":"246","line":22,"column":12,"nodeType":"228","messageId":"229","endLine":22,"endColumn":18},{"ruleId":"226","severity":1,"message":"247","line":23,"column":12,"nodeType":"228","messageId":"229","endLine":23,"endColumn":20},{"ruleId":"248","severity":1,"message":"249","line":41,"column":9,"nodeType":"250","messageId":"251","endLine":62,"endColumn":10},{"ruleId":"248","severity":1,"message":"249","line":69,"column":9,"nodeType":"250","messageId":"251","endLine":79,"endColumn":10},{"ruleId":"226","severity":1,"message":"252","line":6,"column":8,"nodeType":"228","messageId":"229","endLine":6,"endColumn":18},{"ruleId":"226","severity":1,"message":"253","line":17,"column":10,"nodeType":"228","messageId":"229","endLine":17,"endColumn":24},{"ruleId":"254","severity":1,"message":"255","line":4,"column":1,"nodeType":"256","endLine":28,"endColumn":2},{"ruleId":"226","severity":1,"message":"257","line":1,"column":27,"nodeType":"228","messageId":"229","endLine":1,"endColumn":35},{"ruleId":"226","severity":1,"message":"258","line":7,"column":8,"nodeType":"228","messageId":"229","endLine":7,"endColumn":14},{"ruleId":"226","severity":1,"message":"259","line":13,"column":30,"nodeType":"228","messageId":"229","endLine":13,"endColumn":41},{"ruleId":"213","replacedBy":"260"},{"ruleId":"215","replacedBy":"261"},{"ruleId":"213","replacedBy":"262"},{"ruleId":"215","replacedBy":"263"},"no-native-reassign",["264"],"no-negated-in-lhs",["265"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'canvasRef', 'largo', 'separacion', 'setAlmacen', and 'setMosSeleccionado'. Either include them or remove the dependency array.","ArrayExpression",["266"],"React Hook useEffect has missing dependencies: 'almacen', 'alto', 'canvasRef', 'largo', 'separacion', and 'setGuardarAlmacen'. Either include them or remove the dependency array.",["267"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-unused-vars","'SimpleMediaQuery' is defined but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'canvasCollage' and 'limpiaColage'. Either include them or remove the dependency array.",["268"],"'Fragment' is defined but never used.","'PropTypes' is defined but never used.","'separacion' is assigned a value but never used.","'mosSeleccionado' is assigned a value but never used.","'canvasAlmacenes' is assigned a value but never used.","'React' is defined but never used.","'canvasRef' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'eliminartodos'. Either include it or remove the dependency array.",["269"],"React Hook useEffect has a missing dependency: 'setAlmacenCollages'. Either include it or remove the dependency array.",["270"],"'idInstruccion' is assigned a value but never used.","'setidInstruccion' is assigned a value but never used.","'posCol' is assigned a value but never used.","'posRen' is assigned a value but never used.","'posRobot' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'DeleteIcon' is defined but never used.","'nvaInstruccion' is assigned a value but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'useState' is defined but never used.","'Button' is defined but never used.","'interpolate' is defined but never used.",["264"],["265"],["264"],["265"],"no-global-assign","no-unsafe-negation",{"desc":"271","fix":"272"},{"desc":"273","fix":"274"},{"desc":"275","fix":"276"},{"desc":"277","fix":"278"},{"desc":"279","fix":"280"},"Update the dependencies array to be: [canvasRef, largo, separacion, setAlmacen, setMosSeleccionado]",{"range":"281","text":"282"},"Update the dependencies array to be: [almacen, alto, canvasRef, guardarAlmacen, largo, separacion, setGuardarAlmacen]",{"range":"283","text":"284"},"Update the dependencies array to be: [canvasCollage, limpiaColage]",{"range":"285","text":"286"},"Update the dependencies array to be: [eliminartodos]",{"range":"287","text":"288"},"Update the dependencies array to be: [almacenCollages, setAlmacenCollages]",{"range":"289","text":"290"},[1910,1912],"[canvasRef, largo, separacion, setAlmacen, setMosSeleccionado]",[2779,2795],"[almacen, alto, canvasRef, guardarAlmacen, largo, separacion, setGuardarAlmacen]",[6970,6972],"[canvasCollage, limpiaColage]",[1336,1338],"[eliminartodos]",[1491,1508],"[almacenCollages, setAlmacenCollages]"]