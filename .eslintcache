[{"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\index.js":"1","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\App.js":"2","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\reportWebVitals.js":"3","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\context\\salas\\salaState.js":"4","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Juegayaprende.js":"5","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\context\\salas\\salaReducer.js":"6","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\context\\salas\\salaContext.js":"7","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\types\\index.js":"8","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Header.js":"9","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Secciones.js":"10","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Almacenes.js":"11","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Horno.js":"12","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Murales.js":"13","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Collages.js":"14","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Programacion.js":"15","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\helper.js":"16","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Amosaico.js":"17","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\types\\imgbotones.js":"18","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Colores.js":"19","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Figuras.js":"20","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Mosaico.js":"21","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Variantes.js":"22","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Player.js":"23","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Sala.js":"24","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Almacencollages.js":"25"},{"size":288,"mtime":1607660916545,"results":"26","hashOfConfig":"27"},{"size":268,"mtime":1608587427942,"results":"28","hashOfConfig":"27"},{"size":362,"mtime":499162500000,"results":"29","hashOfConfig":"27"},{"size":2259,"mtime":1608693223664,"results":"30","hashOfConfig":"27"},{"size":544,"mtime":1608587640059,"results":"31","hashOfConfig":"27"},{"size":964,"mtime":1608693114191,"results":"32","hashOfConfig":"27"},{"size":109,"mtime":1608072096972,"results":"33","hashOfConfig":"27"},{"size":2164,"mtime":1608693086396,"results":"34","hashOfConfig":"27"},{"size":2817,"mtime":1608587598439,"results":"35","hashOfConfig":"27"},{"size":3393,"mtime":1608587691367,"results":"36","hashOfConfig":"27"},{"size":10940,"mtime":1608759239586,"results":"37","hashOfConfig":"27"},{"size":6281,"mtime":1608771010619,"results":"38","hashOfConfig":"27"},{"size":9393,"mtime":1608649373440,"results":"39","hashOfConfig":"27"},{"size":8517,"mtime":1608653807530,"results":"40","hashOfConfig":"27"},{"size":141,"mtime":1608766488191,"results":"41","hashOfConfig":"27"},{"size":3504,"mtime":1608076180696,"results":"42","hashOfConfig":"27"},{"size":2287,"mtime":1608598372299,"results":"43","hashOfConfig":"27"},{"size":14579,"mtime":1608079478827,"results":"44","hashOfConfig":"27"},{"size":11678,"mtime":1608587577386,"results":"45","hashOfConfig":"27"},{"size":9935,"mtime":1608587586781,"results":"46","hashOfConfig":"27"},{"size":13653,"mtime":1608595036442,"results":"47","hashOfConfig":"27"},{"size":19119,"mtime":1608587702494,"results":"48","hashOfConfig":"27"},{"size":1475,"mtime":1608587658724,"results":"49","hashOfConfig":"27"},{"size":2623,"mtime":1608649558804,"results":"50","hashOfConfig":"27"},{"size":12252,"mtime":1608653979827,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"kuyef4",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"54"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"54"},"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\index.js",[],["105","106"],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\App.js",[],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\reportWebVitals.js",[],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\context\\salas\\salaState.js",[],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Juegayaprende.js",[],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\context\\salas\\salaReducer.js",[],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\context\\salas\\salaContext.js",[],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\types\\index.js",[],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Header.js",[],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Secciones.js",[],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Almacenes.js",["107","108"],"import React, { useContext, useEffect } from 'react';\r\nimport salaContext from '../context/salas/salaContext'\r\nimport styles from './Sala.module.css';\r\n\r\nimport FolderOpenIcon from '@material-ui/icons/FolderOpen';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nimport Button from '@material-ui/core/Button';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { obtenerXInicialMos, obtenerYInicialMos, obtenerMosXSeleccionado, obtenerXDelMosSeleccionado, obtenerLargoAlmacen, obtenerAltoAlmacen, obtenerNumMosaicosXLargoImagen } from '../helper';\r\n\r\nconst Almacenes = React.forwardRef((props,ref) => {\r\n\r\n    const refInput = React.createRef();\r\n\r\n    const salaContexto = useContext(salaContext);\r\n    const { alto, largo, separacion, almacen, setAlmacen, mosSeleccionado, setMosSeleccionado, guardarAlmacen, setGuardarAlmacen } = salaContexto;\r\n    const canvasRef = ref;\r\n\r\n    useEffect(() => {\r\n        const almacenMos = localStorage.getItem('almacenMos');  //lee de localStorage la variable\r\n        if(almacenMos != null){   \r\n            const canvasAlm = canvasRef.current;\r\n            const ctxAlm = canvasAlm.getContext('2d'); //Crea el contexto donde pintarÃ¡ el mosaico seleccionado \r\n            ctxAlm.restore();\r\n            ctxAlm.fillStyle = 'white';\r\n            ctxAlm.strokeStyle = 'white';  \r\n            ctxAlm.fillRect(0, 0, canvasAlm.width, canvasAlm.height);\r\n            setMosSeleccionado(0);\r\n\r\n            let img = new Image();\r\n            img.src = almacenMos;\r\n\r\n            img.onload = function() {\r\n                let numMos = obtenerNumMosaicosXLargoImagen(img.naturalWidth, largo, separacion);\r\n                setAlmacen(numMos);\r\n                ctxAlm.drawImage(img, 0, 0, img.width, img.height);\r\n            }\r\n        }\r\n    }, []);\r\n\r\n\r\n    useEffect (()=>{\r\n        if (guardarAlmacen){\r\n            const canvas = canvasRef.current;\r\n            let canvasdwn = document.createElement('canvas');\r\n            canvasdwn.width = obtenerLargoAlmacen(almacen, largo, separacion); //le coloca el largo del canvas dependiendo de los mosaicos\r\n            canvasdwn.height = obtenerAltoAlmacen(alto, separacion);//coloca el alto del canvas\r\n            var destCtx = canvasdwn.getContext('2d');\r\n            destCtx.drawImage(canvas, 0, 0); //Copia la imagen del canvas del almacen al canvas que va a descargar con el tamaÃ±o mÃ­nimo necesario\r\n            let dataImg = canvasdwn.toDataURL(); //convierte la imagen a una cadena base 64\r\n            localStorage.setItem('almacenMos', dataImg); //guarda la cadena en base 64 en el Local Storage\r\n            setGuardarAlmacen(false);\r\n        }\r\n    }, [guardarAlmacen]);\r\n\r\n\r\n    const handleChange = e => {\r\n        const canvas = canvasRef.current;\r\n        const ctx = canvas.getContext('2d');\r\n        let rect = canvas.getBoundingClientRect();\r\n        let x = e.clientX - rect.left; //Obtiene coordenada X donde el usuario dio clic\r\n        let y = e.clientY - rect.top; // Obtiene coordenada Y donde el usuario dio clic\r\n        let numMos = obtenerMosXSeleccionado(x, largo, separacion); //Obtenemos el numero de mosaico seleccionado\r\n        if (numMos !== mosSeleccionado && numMos <= almacen) { //El mosaico debe ser diferente al seleccionado con anterioridad y debe ser menor al tamaÃ±o del almacen\r\n            ctx.strokeStyle = 'white'; //El color blanco del cuadro para borrar la seleccion del mosaico seleccionado con anterioridad\r\n            ctx.lineWidth = 3; //Grosor 3 para borar el marco negrocon grosor 2\r\n            let xx = obtenerXDelMosSeleccionado(mosSeleccionado, largo, separacion); //Obtiene la coordenada X del mosaico seleccionado\r\n            ctx.strokeRect(xx, 0, separacion + largo + separacion, separacion + alto + separacion); // imprime el marco blanco\r\n            ctx.strokeStyle = 'black'; //Coloca el color negro para el marco del mosaico seleccionado\r\n            ctx.lineWidth = 2; //El marco de grosor 2 para que pueda ser borrado por el marco blanco\r\n            const xInicialMos = obtenerXInicialMos(x, largo, separacion); //Se obtiene la coordenada X del marco a pintar \r\n            const yInicialMos = obtenerYInicialMos(y, alto, separacion); //Se obtiene la coordenada Y del marco a pintar \r\n            ctx.strokeRect(xInicialMos, yInicialMos, separacion + largo + separacion, separacion + alto + separacion); //Se pinta el marco negro \r\n            setMosSeleccionado(numMos);//Guarda el nuevo mosaico seleccionado   \r\n        }\r\n    }\r\n\r\n    const abrirAlmacen = e => {\r\n        const canvas = canvasRef.current;\r\n        const ctx = canvas.getContext('2d');\r\n        ctx.fillStyle = 'white';\r\n        ctx.strokeStyle = 'white';  \r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n        setMosSeleccionado(0);//Ya no hay mosaico seleccionado\r\n    \r\n        const img = new Image();\r\n        const file = e.target.files[0];\r\n        const reader = new FileReader();\r\n      \r\n        reader.addEventListener(\"load\", function () {\r\n          img.src = reader.result;\r\n        }, false);\r\n      \r\n        if (file) {\r\n          reader.readAsDataURL(file);\r\n        }\r\n    \r\n        img.onload = function() {\r\n            let numMos = obtenerNumMosaicosXLargoImagen(img.naturalWidth, largo, separacion);\r\n            setAlmacen(numMos);\r\n          ctx.drawImage(img, 0, 0, img.naturalWidth, img.naturalHeight);\r\n        };\r\n        console.log(img.naturalWidth);\r\n    }\r\n        \r\n    const eliminartodos = () => {\r\n        const canvas = canvasRef.current;\r\n        const ctx = canvas.getContext('2d');\r\n        ctx.fillStyle = 'white';\r\n        ctx.strokeStyle = 'white';  \r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n        setAlmacen(0);\r\n        setMosSeleccionado(0);//Ya no hay mosaico seleccionado\r\n    }\r\n\r\n    const borrarMos = () => {\r\n        if (mosSeleccionado > 0 && almacen > 0){  //Si existen mosaicos en el almacen y hay alguno seleccionado\r\n            const canvas = canvasRef.current;\r\n            const ctx = canvas.getContext('2d');\r\n            ctx.strokeStyle = 'white'; //El color blanco del cuadro para borrar la seleccion del mosaico seleccionado con anterioridad\r\n            ctx.lineWidth = 3; //Grosor 3 para borar el marco negrocon grosor 2\r\n            let xx = obtenerXDelMosSeleccionado(mosSeleccionado, largo, separacion); //Obtiene la coordenada X del mosaico seleccionado\r\n            ctx.strokeRect(xx, 0, separacion + largo + separacion, separacion + alto + separacion); // imprime el marco blanco\r\n            xx = obtenerXDelMosSeleccionado(mosSeleccionado+1, largo, separacion);\r\n            var imgData = ctx.getImageData(xx, 0, canvas.width-xx, canvas.height); //Obtiene la imagen  del canvas del mosaico en TRANSICION   \r\n            xx = obtenerXDelMosSeleccionado(mosSeleccionado, largo, separacion);          \r\n            ctx.putImageData(imgData, xx, 0);\r\n            setAlmacen(almacen -1);\r\n            setMosSeleccionado(0);//Ya no hay mosaico seleccionado\r\n        }\r\n    }\r\n\r\n    const guardar = () => {\r\n        if (almacen > 0){\r\n            const canvas = canvasRef.current;\r\n            if (mosSeleccionado > 0){  //Si existen mosaicos en el almacen y hay alguno seleccionado\r\n                \r\n                const ctx = canvas.getContext('2d');\r\n                ctx.strokeStyle = 'white'; //El color blanco del cuadro para borrar la seleccion del mosaico seleccionado con anterioridad\r\n                ctx.lineWidth = 3; //Grosor 3 para borar el marco negrocon grosor 2\r\n                let xx = obtenerXDelMosSeleccionado(mosSeleccionado, largo, separacion); //Obtiene la coordenada X del mosaico seleccionado\r\n                ctx.strokeRect(xx, 0, separacion + largo + separacion, separacion + alto + separacion); // imprime el marco blanco\r\n                setMosSeleccionado(0);//Ya no hay mosaico seleccionado\r\n            }\r\n            let canvasdwn = document.createElement('canvas'); //Crea el canvas que va a descargar\r\n            canvasdwn.width = obtenerLargoAlmacen(almacen, largo, separacion); //le coloca el largo del canvas dependiendo de los mosaicos\r\n            canvasdwn.height = obtenerAltoAlmacen(alto, separacion);//coloca el alto del canvas\r\n            var destCtx = canvasdwn.getContext('2d');\r\n            destCtx.drawImage(canvas, 0, 0); //Copia la imagen del canvas del almacen al canvas que va a descargar con el tamaÃ±o mÃ­nimo necesario\r\n            let downloadLink = document.createElement('a');\r\n            downloadLink.setAttribute('download', 'almacen.png');\r\n            let dataURL = canvasdwn.toDataURL('image/png');\r\n            let url = dataURL.replace(/^data:image\\/png/,'data:application/octet-stream');\r\n            downloadLink.setAttribute('href',url);\r\n            downloadLink.click();\r\n        }\r\n    }\r\n\r\n    return ( \r\n        <div className={`${styles.tercera_seccion}`} >\r\n            <div className={`${styles.contenedor_almacen}`} >\r\n                <canvas\r\n                    ref={ref}\r\n                    id='canv'\r\n                    width='1000'\r\n                    height={separacion + largo + separacion}\r\n                    onClick={handleChange}\r\n                />\r\n            </div>\r\n\r\n            <div>\r\n                    <Button\r\n                        component=\"label\"\r\n                    >\r\n                        <input\r\n                            type=\"file\"\r\n                            id=\"fileUpload\"\r\n                            style={{ display: \"none\" }}\r\n                            onChange={abrirAlmacen}\r\n                            ref={refInput}\r\n                        />\r\n                        <FolderOpenIcon></FolderOpenIcon>\r\n                    </Button>\r\n\r\n                    <Button\r\n                        type=\"button\"\r\n                        onClick={ () => guardar() }\r\n                    >\r\n                    <SaveIcon>\r\n                    </SaveIcon>\r\n                    </Button>\r\n\r\n                    <Button\r\n                            type=\"button\"\r\n                            onClick={ () => borrarMos() }\r\n                        >\r\n                        <HighlightOffIcon\r\n                            type=\"button\"\r\n                            fontSize=\"small\"\r\n                            style={{ color: 'blue' }}\r\n                    \r\n                        ></HighlightOffIcon>\r\n                    </Button>\r\n\r\n                    <Button\r\n                                type=\"button\"\r\n                                onClick={ () => eliminartodos() }\r\n                            >\r\n                        <DeleteOutlineIcon></DeleteOutlineIcon>\r\n                    </Button>\r\n            </div>\r\n        </div> \r\n     );\r\n});\r\n\r\nAlmacenes.protoTypes = {\r\n    ref: PropTypes.node.isRequired \r\n}\r\n \r\nexport default Almacenes;","D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Horno.js",[],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Murales.js",[],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Collages.js",[],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Programacion.js",[],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\helper.js",[],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Amosaico.js",[],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\types\\imgbotones.js",[],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Colores.js",[],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Figuras.js",[],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Mosaico.js",[],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Variantes.js",[],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Player.js",[],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Sala.js",[],"D:\\Rodrigo\\react\\mosaicos_magicos\\src\\components\\Almacencollages.js",["109","110"],"import React, { useState, useContext, useEffect } from 'react';\r\nimport salaContext from '../context/salas/salaContext';\r\nimport styles from './Almacencollages.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport FolderOpenIcon from '@material-ui/icons/FolderOpen';\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst Almacencollages = React.forwardRef((props,ref) => {\r\n\r\n    const refInput = React.createRef();\r\n    const mural1 = React.createRef();\r\n    const mural2 = React.createRef();\r\n    const mural3 = React.createRef();\r\n    const mural4 = React.createRef();\r\n    const mural5 = React.createRef();\r\n    const mural6 = React.createRef();\r\n    const mural7 = React.createRef();\r\n    const mural8 = React.createRef();\r\n    const mural9 = React.createRef();\r\n    const mural10 = React.createRef();\r\n\r\n    const salaContexto = useContext(salaContext);\r\n    const { almacenCollages, setAlmacenCollages} = salaContexto;\r\n    const canvasRef = ref;\r\n    const componentsMap = [ mural1, mural2, mural3, mural4, mural5, mural6, mural7, mural8, mural9, mural10 ];\r\n\r\n    const [muralSeleccionado, setMuralSeleccionado] = useState(0);\r\n\r\n    useEffect (()=>{\r\n        if (almacenCollages<=0){\r\n            setAlmacenCollages(0);\r\n            setMuralSeleccionado(0);\r\n        }\r\n    }, [almacenCollages]);\r\n\r\n\r\n    const abrirAlmacen = e => {\r\n        let canvas;\r\n        switch (almacenCollages) {\r\n            case 0:\r\n                canvas = mural1.current;\r\n                break;\r\n            case 1:\r\n                canvas = mural2.current;\r\n                break;\r\n            case 2:\r\n                canvas = mural3.current;\r\n                break;\r\n            case 3:\r\n                canvas = mural4.current;\r\n                break;\r\n            case 4:\r\n                canvas = mural5.current;\r\n                break;\r\n            case 5:\r\n                canvas = mural6.current;\r\n                break;\r\n            case 6:\r\n                canvas = mural7.current;\r\n                break;\r\n            case 7:\r\n                canvas = mural8.current;\r\n                break;\r\n            case 8:\r\n                canvas = mural9.current;\r\n                break;\r\n            case 9:\r\n                canvas = mural10.current;\r\n                break;\r\n            default:\r\n                canvas = mural1.current;\r\n                break;\r\n        }\r\n            const ctx = canvas.getContext('2d');\r\n            ctx.fillStyle = 'white';\r\n            ctx.strokeStyle = 'white';  \r\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n            const img = new Image();\r\n            const file = e.target.files[0];\r\n            const reader = new FileReader();\r\n            reader.addEventListener(\"load\", function () {\r\n                img.src = reader.result;\r\n            }, false);\r\n                \r\n            if (file) {\r\n                reader.readAsDataURL(file);\r\n            }\r\n              \r\n            img.onload = function() {\r\n              ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\r\n            };\r\n            setAlmacenCollages(almacenCollages + 1);\r\n        \r\n        setMuralSeleccionado(0)\r\n    }\r\n\r\n    const handleChange = e => {\r\n        if(parseInt(e.target.parentElement.id, 10) <= almacenCollages){\r\n            setMuralSeleccionado(parseInt(e.target.parentElement.id, 10));\r\n            const canvasAlm = e.currentTarget; //El current del Almacen\r\n            const canvasSel = ref.current;       //El current del mosaico seleccionado oculto\r\n            const ctxAlm = canvasAlm.getContext('2d');  //Crea el contexto donde tomarÃ¡ el mosaico seleccionado\r\n            const ctxMuralSel = canvasSel.getContext('2d'); //Crea el contexto donde pintarÃ¡ el mosaico seleccionado\r\n            var imgMural = ctxAlm.getImageData(0,0, canvasAlm.width-1, canvasAlm.height-1);//Toma el mosaico del almacen\r\n            ctxMuralSel.putImageData(imgMural, 0, 0); //Estampa el mosaico en el Mural\r\n        }\r\n    }\r\n\r\n    const eliminartodos = () => {\r\n        let canv;\r\n        let canvas;\r\n        let ctx;\r\n        for (let index = 0; index < 10; index++) {\r\n            canv = componentsMap[index];\r\n            canvas = canv.current;\r\n            ctx = canvas.getContext('2d');\r\n            ctx.clearRect(0, 0, canvas.width, canvas.height); \r\n        }\r\n        setMuralSeleccionado(0);\r\n        setAlmacenCollages(0);\r\n    }\r\n\r\n    const borrarMural = () => {\r\n        if (muralSeleccionado > 0 && almacenCollages > 0){\r\n            let canv1;\r\n            let canv2;\r\n            let canvas1;\r\n            let canvas2;\r\n            let ctx1;\r\n            for (let index = muralSeleccionado; index < almacenCollages; index++) {\r\n                canv1 = componentsMap[index - 1];\r\n                canv2 = componentsMap[index];\r\n                canvas1 = canv1.current;\r\n                canvas2 = canv2.current;\r\n                ctx1 = canvas1.getContext('2d');\r\n                ctx1.drawImage(canvas2, 0, 0);\r\n            }\r\n            canv1 = componentsMap[almacenCollages - 1];\r\n            canvas1 = canv1.current;\r\n            ctx1 = canvas1.getContext('2d');\r\n            ctx1.clearRect(0, 0, canvas1.width, canvas1.height);\r\n            setAlmacenCollages(almacenCollages - 1 );\r\n            setMuralSeleccionado(0);\r\n        }\r\n    }\r\n\r\n\r\n    return ( \r\n        <div className={`${styles.tercera_seccion}`} >\r\n            <div className={`${styles.contenedor_almacen_collages}`} >\r\n                <div className={(1 === muralSeleccionado) ? `${styles.cont_mural_almacen_sel}` : `${styles.cont_mural_almacen}`}\r\n                    id='1'>\r\n                        <canvas className={`${styles.mural_collage}`}\r\n                            width='493px'\r\n                            height='329px'\r\n                            id='11'\r\n                            ref={mural1}\r\n                            onClick={handleChange}\r\n                        />\r\n                </div>\r\n                <div className={(2 === muralSeleccionado) ? `${styles.cont_mural_almacen_sel}` : `${styles.cont_mural_almacen}`}\r\n                    id='2'>\r\n                        <canvas className={`${styles.mural_collage}`}\r\n                            width='493px'\r\n                            height='329px'\r\n                            id='12'\r\n                            ref={mural2}\r\n                            onClick={handleChange}\r\n                        />\r\n                </div>\r\n                <div className={(3 === muralSeleccionado) ? `${styles.cont_mural_almacen_sel}` : `${styles.cont_mural_almacen}`}\r\n                    id='3'>\r\n                        <canvas className={`${styles.mural_collage}`}\r\n                            width='493px'\r\n                            height='329px'\r\n                            id='13'\r\n                            ref={mural3}\r\n                            onClick={handleChange}\r\n                        />\r\n                </div>\r\n                <div className={(4 === muralSeleccionado) ? `${styles.cont_mural_almacen_sel}` : `${styles.cont_mural_almacen}`}\r\n                    id='4'>\r\n                        <canvas className={`${styles.mural_collage}`}\r\n                            width='493px'\r\n                            height='329px'\r\n                            id='14'\r\n                            ref={mural4}\r\n                            onClick={handleChange}\r\n                        />\r\n                </div>\r\n                <div className={(5 === muralSeleccionado) ? `${styles.cont_mural_almacen_sel}` : `${styles.cont_mural_almacen}`}\r\n                    id='5'>\r\n                        <canvas className={`${styles.mural_collage}`}\r\n                            width='493px'\r\n                            height='329px'\r\n                            id='15'\r\n                            ref={mural5}\r\n                            onClick={handleChange}\r\n                        />\r\n                </div>\r\n                <div className={(6 === muralSeleccionado) ? `${styles.cont_mural_almacen_sel}` : `${styles.cont_mural_almacen}`}\r\n                    id='6'>\r\n                        <canvas className={`${styles.mural_collage}`}\r\n                            width='493px'\r\n                            height='329px'\r\n                            id='16'\r\n                            ref={mural6}\r\n                            onClick={handleChange}\r\n                        />\r\n                </div>\r\n                <div className={(7 === muralSeleccionado) ? `${styles.cont_mural_almacen_sel}` : `${styles.cont_mural_almacen}`}\r\n                    id='7'>\r\n                        <canvas className={`${styles.mural_collage}`}\r\n                            width='493px'\r\n                            height='329px'\r\n                            id='17'\r\n                            ref={mural7}\r\n                            onClick={handleChange}\r\n                        />\r\n                </div>\r\n                <div className={(8 === muralSeleccionado) ? `${styles.cont_mural_almacen_sel}` : `${styles.cont_mural_almacen}`}\r\n                    id='8'>\r\n                        <canvas className={`${styles.mural_collage}`}\r\n                            width='493px'\r\n                            height='329px'\r\n                            id='18'\r\n                            ref={mural8}\r\n                            onClick={handleChange}\r\n                        />\r\n                </div>\r\n                <div className={(9 === muralSeleccionado) ? `${styles.cont_mural_almacen_sel}` : `${styles.cont_mural_almacen}`}\r\n                    id='9'>\r\n                        <canvas className={`${styles.mural_collage}`}\r\n                            width='493px'\r\n                            height='329px'\r\n                            id='19'\r\n                            ref={mural9}\r\n                            onClick={handleChange}\r\n                        />\r\n                </div>\r\n                <div className={(10 === muralSeleccionado) ? `${styles.cont_mural_almacen_sel}` : `${styles.cont_mural_almacen}`}\r\n                    id='10'>\r\n                        <canvas className={`${styles.mural_collage}`}\r\n                            width='493px'\r\n                            height='329px'\r\n                            id='20'\r\n                            ref={mural10}\r\n                            onClick={handleChange}\r\n                        />\r\n                </div>\r\n            </div>\r\n\r\n            <div>\r\n                    <Button\r\n                        component=\"label\"\r\n                    >\r\n                        <input\r\n                            type=\"file\"\r\n                            id=\"fileUpload\"\r\n                            style={{ display: \"none\" }}\r\n                            onChange={abrirAlmacen}\r\n                            ref={refInput}\r\n                        />\r\n                        <FolderOpenIcon></FolderOpenIcon>\r\n                    </Button>\r\n\r\n                    <Button\r\n                            type=\"button\"\r\n                            onClick={ () => borrarMural() }\r\n                        >\r\n                        <HighlightOffIcon\r\n                            type=\"button\"\r\n                            fontSize=\"small\"\r\n                            style={{ color: 'blue' }}\r\n                    \r\n                        ></HighlightOffIcon>\r\n                    </Button>\r\n    \r\n                    <Button\r\n                                type=\"button\"\r\n                                onClick={ () => eliminartodos() }\r\n                            >\r\n                        <DeleteOutlineIcon></DeleteOutlineIcon>\r\n                    </Button>\r\n\r\n            </div>\r\n            <canvas className={`${styles.mural_oculto}`}\r\n                            width='493px'\r\n                            height='329px'\r\n                            id='21'\r\n                            ref={ref}\r\n            />\r\n        </div>\r\n     );\r\n});\r\n\r\nAlmacencollages.protoTypes = {\r\n    ref: PropTypes.node.isRequired \r\n}\r\n \r\nexport default Almacencollages;",{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","severity":1,"message":"116","line":42,"column":8,"nodeType":"117","endLine":42,"endColumn":10,"suggestions":"118"},{"ruleId":"115","severity":1,"message":"119","line":57,"column":8,"nodeType":"117","endLine":57,"endColumn":24,"suggestions":"120"},{"ruleId":"121","severity":1,"message":"122","line":27,"column":11,"nodeType":"123","messageId":"124","endLine":27,"endColumn":20},{"ruleId":"115","severity":1,"message":"125","line":37,"column":8,"nodeType":"117","endLine":37,"endColumn":25,"suggestions":"126"},"no-native-reassign",["127"],"no-negated-in-lhs",["128"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'canvasRef', 'largo', 'separacion', 'setAlmacen', and 'setMosSeleccionado'. Either include them or remove the dependency array.","ArrayExpression",["129"],"React Hook useEffect has missing dependencies: 'almacen', 'alto', 'canvasRef', 'largo', 'separacion', and 'setGuardarAlmacen'. Either include them or remove the dependency array.",["130"],"no-unused-vars","'canvasRef' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'setAlmacenCollages'. Either include it or remove the dependency array.",["131"],"no-global-assign","no-unsafe-negation",{"desc":"132","fix":"133"},{"desc":"134","fix":"135"},{"desc":"136","fix":"137"},"Update the dependencies array to be: [canvasRef, largo, separacion, setAlmacen, setMosSeleccionado]",{"range":"138","text":"139"},"Update the dependencies array to be: [almacen, alto, canvasRef, guardarAlmacen, largo, separacion, setGuardarAlmacen]",{"range":"140","text":"141"},"Update the dependencies array to be: [almacenCollages, setAlmacenCollages]",{"range":"142","text":"143"},[1905,1907],"[canvasRef, largo, separacion, setAlmacen, setMosSeleccionado]",[2774,2790],"[almacen, alto, canvasRef, guardarAlmacen, largo, separacion, setGuardarAlmacen]",[1428,1445],"[almacenCollages, setAlmacenCollages]"]